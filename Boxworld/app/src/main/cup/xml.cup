package com.mio.cliente.boxworld.compiler.parser;

import com.mio.cliente.boxworld.builders.*;
import com.mio.cliente.boxworld.compiler.Token;
import com.mio.cliente.boxworld.compiler.lexer.XMLLexer;
import com.mio.cliente.boxworld.models.ErrorType;
import com.mio.cliente.boxworld.models.Response;
import com.mio.cliente.boxworld.models.ResponseType;
import com.mio.cliente.boxworld.models.ParserError;
import java.util.ArrayList;

class XMLParser;

/*
 java -jar java-cup-11b.jar /home/mio/Escritorio/2023/proyecto-1-compis1/server/src/main/cup/xml.cup
*/

parser code {:

    private WorldBuilder worldBuilder;
    private WConfigBuilder configBuilder;
    private PointBuilder pointBuilder;
    private BoardBuilder boardBuilder;
    private ErrorBuilder errorBuilder;
    public XMLParser(XMLLexer lexer){
        super(lexer);
        this.worldBuilder = new WorldBuilder();
        this.configBuilder = new WConfigBuilder();
        this.pointBuilder = new PointBuilder();
        this.boardBuilder = new BoardBuilder();
        this.errorBuilder = new ErrorBuilder();
    }
:}


terminal Token NAME, ROWS, COLS, PLAYER, CONFIG, TARGETS, BOXES, BOARD, WORLD, WORLDS, TYPE, POSX, POSY, MENOR_QUE, MAYOR_QUE;
terminal Token BOX_COLOR, BOX_ON_TARGET_COLOR, TARGET_COLOR, UNDEFINED_COLOR, BRICK_COLOR, HALL_COLOR, PLAYER_COLOR;
terminal Token INTERROGACION, XML, VERSION, IGUAL, LITERAL, ENCODING, DIAGONAL,SYM,LEXICO, SINTACTICO, SEMANTICO;
terminal Token ERRORS, ERROR, LINE, COLUMN, DESCRIPTION, LEXEMA;
terminal Token HEXADECIMAL, HALL, BRICK, ENTERO, PALABRA;

//non terminals
non terminal encoding, attributes, attribute, pointProd, pointAttribute;
non terminal boardProd, boardAttribute, configProd, configAttribute, errProd, errAttribute;
non terminal Response main, responseProd;
non terminal World worldProd;
non terminal String typeAttribute;
non terminal ArrayList<String> worldNamesProd;
non terminal String descType, descProd;
non terminal ErrorType errType;
non terminal ArrayList<ParserError> errsProd, errorProd;

//tags
non terminal rowsA, rowsC, colsA, colsC, configA, configC, boardA, boardC;
non terminal boxesA, boxesC, targetsA, targetsC, playerA, playerC, worldsC, worldsA,worldA, worldC, nameA, nameC;
non terminal boxColorA, boxColorC, boxOnTargetColorA, boxOnTargetColorC, targetColorA, targetColorC;
non terminal brickColorA, brickColorC, hallColorA, hallColorC, undefinedColorA, undefinedColorC, playerColorA;
non terminal posxA, posxC, posyA, posyC, typeA, typeC, playerColorC;
non terminal errsA, errsC, errA, errC, lexemaA, lexemaC, lineA, lineC, columnA, columnC, descriptionA, descriptionC;

start with main;

main ::= encoding responseProd:response                                 {:RESULT = response;:}
	;

encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE
    ;

responseProd ::= worldA attributes worldC                                   {:RESULT = new Response(ResponseType.WORLD, worldBuilder.build(), null, null);:}
    | worldsA worldNamesProd:array worldsC                                  {:RESULT = new Response(ResponseType.WORLD_NAMES, null, null, array);:}
    | errsA errsProd:array errsC                                            {:RESULT = new Response(ResponseType.ERRORS, null, array, null);:}
    ;

worldNamesProd ::= worldNamesProd:array worldA PALABRA:name worldC          {:array.add(name.getValue());
                                                                            RESULT = array;:}
    | worldA PALABRA:name worldC                                            {:RESULT = new ArrayList<String>();
                                                                            RESULT.add(name.getValue());:}
    ;

errsProd ::= errsProd:array errA errProd errC                               {:array.add(errorBuilder.build());
                                                                            errorBuilder.clean();
                                                                            RESULT = array;:}
    | errA errProd errC                                                     {:RESULT = new ArrayList<ParserError>();
                                                                            RESULT.add(errorBuilder.build());
                                                                            errorBuilder.clean();:}
    ;

errProd ::= errProd errAttribute
    | errAttribute
    ;

errAttribute ::= lexemaA descProd:lexeme lexemaC                            {:errorBuilder.withLexema(lexeme);:}
    | lineA ENTERO:i lineC                                                  {:errorBuilder.withLine(Integer.valueOf(i.getValue()));:}
    | columnA ENTERO:i columnC                                              {:errorBuilder.withColumn(Integer.valueOf(i.getValue()));:}
    | typeA errType:error typeC                                             {:errorBuilder.withErrorType(error);:}
    | descriptionA descProd:description descriptionC                        {:errorBuilder.withDescription(description);:}
    ;

descProd ::= descProd:string descType:another                               {:RESULT = string+" "+another;:}
    | descType:string                                                       {:RESULT = string;:}
    ;

descType ::= PALABRA:p                                                      {:RESULT = p.getValue();:}
    | ENTERO:e                                                              {:RESULT = e.getValue();:}
    | SYM:sym                                                               {:RESULT =sym.getValue();:}
    ;

errType ::= LEXICO                                                          {:RESULT = ErrorType.LEXICO;:}
    | SINTACTICO                                                            {:RESULT = ErrorType.SINTACTICO;:}
    | SEMANTICO                                                             {:RESULT = ErrorType.SEMANTICO;:}
    ;

attributes ::= attributes attribute
    | attribute
    ;

attribute ::= nameA PALABRA:nombre nameC                            {:worldBuilder.withName(nombre.getValue());:}
    | rowsA ENTERO:entero rowsC                                     {:worldBuilder.withRows(Integer.valueOf(entero.getValue()));:}
    | colsA ENTERO:entero colsC                                     {:worldBuilder.withCols(Integer.valueOf(entero.getValue()));:}
    | configA configProd configC                                    {:worldBuilder.withConfig(configBuilder.build());
                                                                    configBuilder.clean();:}
    | boardA boardProd boardC                                       {:worldBuilder.withBoard(boardBuilder.withPoint(pointBuilder.build()).build());
                                                                    pointBuilder.clean();
                                                                    boardBuilder.clean();:}
    | boxesA pointProd boxesC                                       {:worldBuilder.withBox(pointBuilder.build());
                                                                    pointBuilder.clean();:}
    | targetsA pointProd targetsC                                   {:worldBuilder.withTarget(pointBuilder.build());
                                                                    pointBuilder.clean();:}
    | playerA pointProd playerC                                     {:worldBuilder.withPlayer(pointBuilder.build());
                                                                    pointBuilder.clean();:}
    ;

configProd ::= configProd configAttribute
    | configAttribute
    ;

configAttribute ::= boxColorA HEXADECIMAL:h boxColorC               {:configBuilder.withBoxColor(h.getValue());:}
	| boxOnTargetColorA HEXADECIMAL:h boxOnTargetColorC             {:configBuilder.withBoxOnTargetColor(h.getValue());:}
	| targetColorA HEXADECIMAL:h targetColorC                       {:configBuilder.withTargetColor(h.getValue());:}
	| brickColorA HEXADECIMAL:h brickColorC                         {:configBuilder.withBrickColor(h.getValue());:}
	| hallColorA HEXADECIMAL:h hallColorC                           {:configBuilder.withHallColor(h.getValue());:}
	| undefinedColorA HEXADECIMAL:h undefinedColorC                 {:configBuilder.withUndefinedColor(h.getValue());:}
	| playerColorA HEXADECIMAL:h playerColorC                       {:configBuilder.withPlayerColor(h.getValue());:}
	;

boardProd ::= boardProd boardAttribute
    | boardAttribute
    ;

boardAttribute ::= posxA ENTERO:entero posxC                        {:pointBuilder.withPosX(Integer.valueOf(entero.getValue()));:}
    | posyA ENTERO:entero posyC                                     {:pointBuilder.withPosY(Integer.valueOf(entero.getValue()));:}
    typeA typeAttribute:type typeC                                  {:boardBuilder.withType(type);:}
    ;

typeAttribute ::= BRICK:type                                        {:RESULT = XMLParserSym.terminalNames[type.getType()];:}
    | HALL:type                                                     {:RESULT = XMLParserSym.terminalNames[type.getType()];:}
    ;

pointProd ::= pointProd pointAttribute
    | pointAttribute
    ;

pointAttribute ::= posxA ENTERO:entero posxC                        {:pointBuilder.withPosX(Integer.valueOf(entero.getValue()));:}
    | posyA ENTERO:entero posyC                                     {:pointBuilder.withPosY(Integer.valueOf(entero.getValue()));:}
    ;


worldsA ::= MENOR_QUE WORLDS MAYOR_QUE
	;

worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE
	;

worldA ::= MENOR_QUE WORLD MAYOR_QUE
	;

worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE
	;

nameA ::= MENOR_QUE NAME MAYOR_QUE
	;

nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE
	;

rowsA ::= MENOR_QUE ROWS MAYOR_QUE
	;
rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE
	;

colsA ::= MENOR_QUE COLS MAYOR_QUE
	;

colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE
	;

configA ::= MENOR_QUE CONFIG MAYOR_QUE
	;

configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE
	;

boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE
	;

boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE
	;

boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE
	;
boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE
	;

targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE
	;
targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE
	;

brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE
	;
brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE
	;

hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE
	;

hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE
	;

undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE
	;

undefinedColorC ::= MENOR_QUE DIAGONAL UNDEFINED_COLOR MAYOR_QUE
	;

playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE
	;

playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE
	;

boardA ::= MENOR_QUE BOARD MAYOR_QUE
	;

boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE
	;

posxA ::= MENOR_QUE POSX MAYOR_QUE
	;

posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE
	;

posyA ::= MENOR_QUE POSY MAYOR_QUE
	;

posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE
	;

typeA ::= MENOR_QUE TYPE MAYOR_QUE
	;

typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE
	;

boxesA ::= MENOR_QUE BOXES MAYOR_QUE
	;

boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE
	;

targetsA ::= MENOR_QUE TARGETS MAYOR_QUE
	;

targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE
	;

playerA ::= MENOR_QUE PLAYER MAYOR_QUE
	;

playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE
	;

errsA ::= MENOR_QUE ERRORS MAYOR_QUE
    ;

errsC ::= MENOR_QUE DIAGONAL ERRORS MAYOR_QUE
    ;

errA ::= MENOR_QUE ERROR MAYOR_QUE
    ;

errC ::= MENOR_QUE DIAGONAL ERROR MAYOR_QUE
    ;

lexemaA ::= MENOR_QUE LEXEMA MAYOR_QUE
    ;

lexemaC ::= MENOR_QUE DIAGONAL LEXEMA MAYOR_QUE
    ;

lineA ::= MENOR_QUE LINE MAYOR_QUE
    ;

lineC ::= MENOR_QUE DIAGONAL LINE MAYOR_QUE
    ;

columnA ::= MENOR_QUE COLUMN MAYOR_QUE
    ;

columnC ::= MENOR_QUE DIAGONAL COLUMN MAYOR_QUE
    ;

descriptionA ::= MENOR_QUE DESCRIPTION MAYOR_QUE
    ;

descriptionC ::= MENOR_QUE DIAGONAL DESCRIPTION MAYOR_QUE
    ;



