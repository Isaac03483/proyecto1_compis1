
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.cliente.boxworld.compiler.parser;

import android.annotation.SuppressLint;
import com.mio.cliente.boxworld.builders.*;
import com.mio.cliente.boxworld.compiler.Token;
import com.mio.cliente.boxworld.compiler.lexer.XMLLexer;
import com.mio.cliente.boxworld.models.ErrorType;
import com.mio.cliente.boxworld.models.Response;
import com.mio.cliente.boxworld.models.ResponseType;
import com.mio.cliente.boxworld.models.ParserError;
import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return XMLParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\015\004\000\002\002" +
    "\015\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\022\006\000\002\022\005\000\002\021\006\000" +
    "\002\021\005\000\002\013\004\000\002\013\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\024\004\000\002\024\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\003\004\000\002\003\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\011\004\000\002\011\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\007\004" +
    "\000\002\007\003\000\002\010\005\000\002\113\002\000" +
    "\002\010\011\000\002\020\003\000\002\020\003\000\002" +
    "\005\004\000\002\005\003\000\002\006\005\000\002\006" +
    "\005\000\002\046\005\000\002\045\006\000\002\047\005" +
    "\000\002\050\006\000\002\051\005\000\002\052\006\000" +
    "\002\027\005\000\002\030\006\000\002\031\005\000\002" +
    "\032\006\000\002\033\005\000\002\034\006\000\002\053" +
    "\005\000\002\054\006\000\002\055\005\000\002\056\006" +
    "\000\002\057\005\000\002\060\006\000\002\061\005\000" +
    "\002\062\006\000\002\063\005\000\002\064\006\000\002" +
    "\065\005\000\002\066\006\000\002\067\005\000\002\076" +
    "\006\000\002\035\005\000\002\036\006\000\002\070\005" +
    "\000\002\071\006\000\002\072\005\000\002\073\006\000" +
    "\002\074\005\000\002\075\006\000\002\037\005\000\002" +
    "\040\006\000\002\041\005\000\002\042\006\000\002\043" +
    "\005\000\002\044\006\000\002\077\005\000\002\100\006" +
    "\000\002\101\005\000\002\102\006\000\002\103\005\000" +
    "\002\104\006\000\002\105\005\000\002\106\006\000\002" +
    "\107\005\000\002\110\006\000\002\111\005\000\002\112" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\004\021\005\001\002\000\004\002\u012c\001" +
    "\002\000\004\032\u0122\001\002\000\004\021\007\001\002" +
    "\000\010\014\031\015\u011e\045\u011f\001\002\000\004\021" +
    "\332\001\002\000\004\021\046\001\002\000\004\002\000" +
    "\001\002\000\004\021\014\001\002\000\004\014\031\001" +
    "\002\000\004\057\035\001\002\000\004\021\017\001\002" +
    "\000\006\014\031\040\030\001\002\000\004\057\022\001" +
    "\002\000\004\002\ufffd\001\002\000\004\021\023\001\002" +
    "\000\004\040\025\001\002\000\004\021\ufffb\001\002\000" +
    "\004\014\026\001\002\000\004\022\027\001\002\000\006" +
    "\002\uffc7\021\uffc7\001\002\000\004\015\033\001\002\000" +
    "\004\022\032\001\002\000\006\021\uffc8\057\uffc8\001\002" +
    "\000\004\022\034\001\002\000\004\002\uffc9\001\002\000" +
    "\004\021\023\001\002\000\004\021\ufffa\001\002\000\004" +
    "\056\323\001\002\000\004\056\315\001\002\000\004\021" +
    "\uffe7\001\002\000\004\021\061\001\002\000\004\021\061" +
    "\001\002\000\004\021\061\001\002\000\004\021\244\001" +
    "\002\000\022\004\232\005\224\006\225\007\226\010\223" +
    "\011\231\012\227\013\230\001\002\000\004\021\122\001" +
    "\002\000\004\021\061\001\002\000\004\057\052\001\002" +
    "\000\004\021\054\001\002\000\004\021\uffe6\001\002\000" +
    "\004\040\055\001\002\000\004\004\056\001\002\000\004" +
    "\022\057\001\002\000\004\021\uffc5\001\002\000\004\056" +
    "\105\001\002\000\006\017\100\020\077\001\002\000\004" +
    "\021\073\001\002\000\004\056\065\001\002\000\004\021" +
    "\uffcd\001\002\000\004\021\066\001\002\000\004\040\070" +
    "\001\002\000\004\021\uffcc\001\002\000\004\017\071\001" +
    "\002\000\004\022\072\001\002\000\004\021\uffad\001\002" +
    "\000\010\017\100\020\077\040\076\001\002\000\004\021" +
    "\uffce\001\002\000\004\021\uffe0\001\002\000\004\011\103" +
    "\001\002\000\004\022\102\001\002\000\004\022\101\001" +
    "\002\000\004\056\uffae\001\002\000\004\056\uffac\001\002" +
    "\000\004\022\104\001\002\000\004\021\uffa5\001\002\000" +
    "\004\021\106\001\002\000\004\040\110\001\002\000\004" +
    "\021\uffcb\001\002\000\004\020\111\001\002\000\004\022" +
    "\112\001\002\000\004\021\uffab\001\002\000\004\053\215" +
    "\001\002\000\004\053\207\001\002\000\004\053\201\001" +
    "\002\000\004\053\173\001\002\000\004\053\165\001\002" +
    "\000\004\021\160\001\002\000\004\021\uffdd\001\002\000" +
    "\020\023\143\024\147\025\145\026\146\027\142\030\141" +
    "\031\144\001\002\000\004\053\133\001\002\000\004\053" +
    "\125\001\002\000\004\021\127\001\002\000\004\021\uffdc" +
    "\001\002\000\004\040\130\001\002\000\004\023\131\001" +
    "\002\000\004\022\132\001\002\000\004\021\uffbd\001\002" +
    "\000\004\021\134\001\002\000\004\040\136\001\002\000" +
    "\004\021\uffda\001\002\000\004\025\137\001\002\000\004" +
    "\022\140\001\002\000\004\021\uffb9\001\002\000\004\022" +
    "\156\001\002\000\004\022\155\001\002\000\004\022\154" +
    "\001\002\000\004\022\153\001\002\000\004\022\152\001" +
    "\002\000\004\022\151\001\002\000\004\022\150\001\002" +
    "\000\004\053\uffbc\001\002\000\004\053\uffb4\001\002\000" +
    "\004\053\uffba\001\002\000\004\053\uffb2\001\002\000\004" +
    "\053\uffbe\001\002\000\004\053\uffb8\001\002\000\004\053" +
    "\uffb6\001\002\000\004\021\uffde\001\002\000\022\023\143" +
    "\024\147\025\145\026\146\027\142\030\141\031\144\040" +
    "\162\001\002\000\004\021\uffe3\001\002\000\004\010\163" +
    "\001\002\000\004\022\164\001\002\000\004\021\uffbf\001" +
    "\002\000\004\021\166\001\002\000\004\040\170\001\002" +
    "\000\004\021\uffdb\001\002\000\004\024\171\001\002\000" +
    "\004\022\172\001\002\000\004\021\uffbb\001\002\000\004" +
    "\021\175\001\002\000\004\021\uffd8\001\002\000\004\040" +
    "\176\001\002\000\004\030\177\001\002\000\004\022\200" +
    "\001\002\000\004\021\uffb5\001\002\000\004\021\202\001" +
    "\002\000\004\040\204\001\002\000\004\021\uffd7\001\002" +
    "\000\004\026\205\001\002\000\004\022\206\001\002\000" +
    "\004\021\uffb3\001\002\000\004\021\210\001\002\000\004" +
    "\040\212\001\002\000\004\021\uffd9\001\002\000\004\027" +
    "\213\001\002\000\004\022\214\001\002\000\004\021\uffb7" +
    "\001\002\000\004\021\216\001\002\000\004\040\220\001" +
    "\002\000\004\021\uffd6\001\002\000\004\031\221\001\002" +
    "\000\004\022\222\001\002\000\004\021\uffb1\001\002\000" +
    "\004\022\242\001\002\000\004\022\241\001\002\000\004" +
    "\022\240\001\002\000\004\022\237\001\002\000\004\022" +
    "\236\001\002\000\004\022\235\001\002\000\004\022\234" +
    "\001\002\000\004\022\233\001\002\000\004\057\uffc6\001" +
    "\002\000\004\021\uffa6\001\002\000\004\021\uffb0\001\002" +
    "\000\004\021\uffa8\001\002\000\004\021\uffa4\001\002\000" +
    "\004\056\uffc2\001\002\000\004\056\uffc4\001\002\000\004" +
    "\021\uffc0\001\002\000\004\021\uffe8\001\002\000\024\004" +
    "\232\005\224\006\225\007\226\010\223\011\231\012\227" +
    "\013\230\040\025\001\002\000\004\002\ufffe\001\002\000" +
    "\004\056\262\001\002\000\004\021\255\001\002\000\004" +
    "\021\uffd4\001\002\000\004\056\252\001\002\000\004\021" +
    "\066\001\002\000\004\021\uffd3\001\002\000\004\021\uffd5" +
    "\001\002\000\010\017\100\020\077\040\257\001\002\000" +
    "\004\021\uffe2\001\002\000\004\013\260\001\002\000\004" +
    "\022\261\001\002\000\004\021\uffaf\001\002\000\004\021" +
    "\106\001\002\000\004\021\uffd2\001\002\000\004\021\265" +
    "\001\002\000\004\016\277\001\002\000\006\054\271\055" +
    "\270\001\002\000\004\021\272\001\002\000\004\021\uffd0" +
    "\001\002\000\004\021\uffcf\001\002\000\004\040\274\001" +
    "\002\000\004\021\uffd1\001\002\000\004\016\275\001\002" +
    "\000\004\022\276\001\002\000\004\021\uffa9\001\002\000" +
    "\004\022\300\001\002\000\014\042\uffaa\043\uffaa\044\uffaa" +
    "\054\uffaa\055\uffaa\001\002\000\004\021\302\001\002\000" +
    "\010\017\100\020\077\040\304\001\002\000\004\021\uffdf" +
    "\001\002\000\004\007\305\001\002\000\004\022\306\001" +
    "\002\000\004\021\uffa3\001\002\000\004\021\311\001\002" +
    "\000\004\021\uffe1\001\002\000\010\017\100\020\077\040" +
    "\312\001\002\000\004\012\313\001\002\000\004\022\314" +
    "\001\002\000\004\021\uffa7\001\002\000\004\021\316\001" +
    "\002\000\004\040\320\001\002\000\004\021\uffe5\001\002" +
    "\000\004\005\321\001\002\000\004\022\322\001\002\000" +
    "\004\021\uffc3\001\002\000\004\021\325\001\002\000\004" +
    "\021\uffe4\001\002\000\004\040\326\001\002\000\004\006" +
    "\327\001\002\000\004\022\330\001\002\000\004\021\uffc1" +
    "\001\002\000\004\021\u0117\001\002\000\004\046\u0114\001" +
    "\002\000\004\021\335\001\002\000\004\021\ufff6\001\002" +
    "\000\014\016\277\047\u0100\050\376\051\375\052\u0101\001" +
    "\002\000\004\056\u010e\001\002\000\010\041\363\056\362" +
    "\057\360\001\002\000\004\021\373\001\002\000\010\041" +
    "\363\056\362\057\360\001\002\000\010\042\353\043\355" +
    "\044\354\001\002\000\004\056\344\001\002\000\004\021" +
    "\345\001\002\000\004\040\347\001\002\000\004\021\ufff3" +
    "\001\002\000\004\050\350\001\002\000\004\022\351\001" +
    "\002\000\004\021\uff99\001\002\000\004\021\272\001\002" +
    "\000\004\021\uffeb\001\002\000\004\021\uffe9\001\002\000" +
    "\004\021\uffea\001\002\000\004\021\ufff2\001\002\000\012" +
    "\021\364\041\363\056\362\057\360\001\002\000\012\021" +
    "\uffee\041\uffee\056\uffee\057\uffee\001\002\000\012\021\uffef" +
    "\041\uffef\056\uffef\057\uffef\001\002\000\012\021\uffed\041" +
    "\uffed\056\uffed\057\uffed\001\002\000\012\021\uffec\041\uffec" +
    "\056\uffec\057\uffec\001\002\000\004\040\367\001\002\000" +
    "\012\021\ufff0\041\ufff0\056\ufff0\057\ufff0\001\002\000\004" +
    "\021\ufff1\001\002\000\004\051\370\001\002\000\004\022" +
    "\371\001\002\000\004\021\uff97\001\002\000\004\021\ufff7" +
    "\001\002\000\016\016\277\040\377\047\u0100\050\376\051" +
    "\375\052\u0101\001\002\000\004\021\ufff8\001\002\000\004" +
    "\022\u0107\001\002\000\004\022\u0106\001\002\000\004\046" +
    "\u0104\001\002\000\004\022\u0103\001\002\000\004\022\u0102" +
    "\001\002\000\010\041\uff9e\056\uff9e\057\uff9e\001\002\000" +
    "\004\056\uff9c\001\002\000\004\022\u0105\001\002\000\004" +
    "\021\uff9f\001\002\000\004\056\uff9a\001\002\000\010\041" +
    "\uff98\056\uff98\057\uff98\001\002\000\012\021\u0109\041\363" +
    "\056\362\057\360\001\002\000\004\040\u010b\001\002\000" +
    "\004\021\ufff5\001\002\000\004\052\u010c\001\002\000\004" +
    "\022\u010d\001\002\000\004\021\uff9d\001\002\000\004\021" +
    "\u010f\001\002\000\004\040\u0111\001\002\000\004\021\ufff4" +
    "\001\002\000\004\047\u0112\001\002\000\004\022\u0113\001" +
    "\002\000\004\021\uff9b\001\002\000\004\022\u0115\001\002" +
    "\000\004\021\uffa0\001\002\000\004\002\ufffc\001\002\000" +
    "\006\040\u011b\046\u0114\001\002\000\004\021\335\001\002" +
    "\000\004\021\373\001\002\000\004\021\ufff9\001\002\000" +
    "\004\045\u011c\001\002\000\004\022\u011d\001\002\000\004" +
    "\002\uffa1\001\002\000\004\022\u0121\001\002\000\004\022" +
    "\u0120\001\002\000\004\021\uffa2\001\002\000\004\021\uffca" +
    "\001\002\000\004\033\u0123\001\002\000\004\034\u0124\001" +
    "\002\000\004\035\u0125\001\002\000\004\036\u0126\001\002" +
    "\000\004\037\u0127\001\002\000\004\035\u0128\001\002\000" +
    "\004\036\u0129\001\002\000\004\032\u012a\001\002\000\004" +
    "\022\u012b\001\002\000\004\021\uffff\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012a\000\006\002\005\015\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\011\046\012\047\010" +
    "\077\007\001\001\000\002\001\001\000\006\021\330\101" +
    "\332\001\001\000\026\003\044\004\040\027\037\031\036" +
    "\033\046\035\043\037\041\041\047\043\042\051\050\001" +
    "\001\000\002\001\001\000\006\022\015\047\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\020\047" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\306\006\063\070\062" +
    "\072\057\001\001\000\012\005\300\006\063\070\062\072" +
    "\057\001\001\000\012\007\246\010\247\070\250\072\245" +
    "\001\001\000\026\004\242\027\037\031\036\033\046\035" +
    "\043\037\041\041\047\043\042\050\244\051\050\001\001" +
    "\000\002\001\001\000\024\011\117\012\120\053\123\055" +
    "\116\057\122\061\113\063\115\065\114\067\112\001\001" +
    "\000\012\005\061\006\063\070\062\072\057\001\001\000" +
    "\002\001\001\000\004\052\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\073\042\074\070\062\072\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\073\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\156\034\160\053\123\055\116\057\122\061" +
    "\113\063\115\065\114\067\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\253\036\255\070\250\072\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\262\001\001\000\004" +
    "\113\263\001\001\000\004\074\265\001\001\000\002\001" +
    "\001\000\004\020\266\001\001\000\004\075\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\073\044\302\070\062\072\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\073\040\307\070\062\072\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\100\u0115" +
    "\101\u0117\001\001\000\002\001\001\000\020\013\337\014" +
    "\333\074\341\103\336\105\335\107\342\111\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\360\024\u0107\001\001\000\020\014\371\074\341" +
    "\102\373\103\336\105\335\107\342\111\340\001\001\000" +
    "\006\023\360\024\356\001\001\000\004\025\351\001\001" +
    "\000\002\001\001\000\004\110\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\075\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\364\112\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\364\104\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\u010f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\u0118\014\333\074\341" +
    "\103\336\105\335\107\342\111\340\001\001\000\020\014" +
    "\371\074\341\102\u0119\103\336\105\335\107\342\111\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private WorldBuilder worldBuilder;
    private WConfigBuilder configBuilder;
    private PointBuilder pointBuilder;
    private BoardBuilder boardBuilder;
    private ErrorBuilder errorBuilder;
    public XMLParser(XMLLexer lexer){
        super(lexer);
        this.worldBuilder = new WorldBuilder();
        this.configBuilder = new WConfigBuilder();
        this.pointBuilder = new PointBuilder();
        this.boardBuilder = new BoardBuilder();
        this.errorBuilder = new ErrorBuilder();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  @SuppressLint("SuspiciousIndentation")
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
      switch (CUP$XMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Response start_val = (Response)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = start_val;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XMLParser$parser.done_parsing();
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= encoding responseProd 
            {
              Response RESULT =null;
		int responseleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int responseright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Response response = (Response)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = response;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("main",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("encoding",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-10)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // responseProd ::= worldA attributes worldC 
            {
              Response RESULT =null;
		RESULT = new Response(ResponseType.WORLD, worldBuilder.build(), null, null);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("responseProd",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // responseProd ::= worldsA worldNamesProd worldsC 
            {
              Response RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<String> array = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = new Response(ResponseType.WORLD_NAMES, null, null, array);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("responseProd",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // responseProd ::= errsA errsProd errsC 
            {
              Response RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<ParserError> array = (ArrayList<ParserError>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = new Response(ResponseType.ERRORS, null, array, null);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("responseProd",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // worldNamesProd ::= worldNamesProd worldA PALABRA worldC 
            {
              ArrayList<String> RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).right;
		ArrayList<String> array = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		array.add(name.getValue());
                                                                            RESULT = array;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldNamesProd",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // worldNamesProd ::= worldA PALABRA worldC 
            {
              ArrayList<String> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = new ArrayList<String>();
                                                                            RESULT.add(name.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldNamesProd",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // errsProd ::= errsProd errA errProd errC 
            {
              ArrayList<ParserError> RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).right;
		ArrayList<ParserError> array = (ArrayList<ParserError>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).value;
		array.add(errorBuilder.build());
                                                                            errorBuilder.clean();
                                                                            RESULT = array;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errsProd",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // errsProd ::= errA errProd errC 
            {
              ArrayList<ParserError> RESULT =null;
		RESULT = new ArrayList<ParserError>();
                                                                            RESULT.add(errorBuilder.build());
                                                                            errorBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errsProd",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // errProd ::= errProd errAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errProd",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // errProd ::= errAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errProd",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // errAttribute ::= lexemaA descProd lexemaC 
            {
              Object RESULT =null;
		int lexemeleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int lexemeright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String lexeme = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		errorBuilder.withLexema(lexeme);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errAttribute",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // errAttribute ::= lineA ENTERO lineC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		errorBuilder.withLine(Integer.valueOf(i.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errAttribute",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // errAttribute ::= columnA ENTERO columnC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		errorBuilder.withColumn(Integer.valueOf(i.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errAttribute",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // errAttribute ::= typeA errType typeC 
            {
              Object RESULT =null;
		int errorleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int errorright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ErrorType error = (ErrorType)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		errorBuilder.withErrorType(error);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errAttribute",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // errAttribute ::= descriptionA descProd descriptionC 
            {
              Object RESULT =null;
		int descriptionleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int descriptionright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String description = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		errorBuilder.withDescription(description);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errAttribute",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // descProd ::= descProd descType 
            {
              String RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int anotherleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int anotherright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String another = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = string+" "+another;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("descProd",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // descProd ::= descType 
            {
              String RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = string;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("descProd",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // descType ::= PALABRA 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = p.getValue();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("descType",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // descType ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = e.getValue();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("descType",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // descType ::= SYM 
            {
              String RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Token sym = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT =sym.getValue();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("descType",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // errType ::= LEXICO 
            {
              ErrorType RESULT =null;
		RESULT = ErrorType.LEXICO;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errType",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // errType ::= SINTACTICO 
            {
              ErrorType RESULT =null;
		RESULT = ErrorType.SINTACTICO;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errType",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // errType ::= SEMANTICO 
            {
              ErrorType RESULT =null;
		RESULT = ErrorType.SEMANTICO;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errType",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // attributes ::= attributes attribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // attributes ::= attribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // attribute ::= nameA PALABRA nameC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		worldBuilder.withName(nombre.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // attribute ::= rowsA ENTERO rowsC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		worldBuilder.withRows(Integer.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // attribute ::= colsA ENTERO colsC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		worldBuilder.withCols(Integer.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // attribute ::= configA configProd configC 
            {
              Object RESULT =null;
		worldBuilder.withConfig(configBuilder.build());
                                                                    configBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // attribute ::= boardA boardProd boardC 
            {
              Object RESULT =null;
		worldBuilder.withBoard(boardBuilder.withPoint(pointBuilder.build()).build());
                                                                    pointBuilder.clean();
                                                                    boardBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // attribute ::= boxesA pointProd boxesC 
            {
              Object RESULT =null;
		worldBuilder.withBox(pointBuilder.build());
                                                                    pointBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // attribute ::= targetsA pointProd targetsC 
            {
              Object RESULT =null;
		worldBuilder.withTarget(pointBuilder.build());
                                                                    pointBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // attribute ::= playerA pointProd playerC 
            {
              Object RESULT =null;
		worldBuilder.withPlayer(pointBuilder.build());
                                                                    pointBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // configProd ::= configProd configAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // configProd ::= configAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // configAttribute ::= boxColorA HEXADECIMAL boxColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withBoxColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // configAttribute ::= boxOnTargetColorA HEXADECIMAL boxOnTargetColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withBoxOnTargetColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // configAttribute ::= targetColorA HEXADECIMAL targetColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withTargetColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // configAttribute ::= brickColorA HEXADECIMAL brickColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withBrickColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // configAttribute ::= hallColorA HEXADECIMAL hallColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withHallColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // configAttribute ::= undefinedColorA HEXADECIMAL undefinedColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withUndefinedColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // configAttribute ::= playerColorA HEXADECIMAL playerColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withPlayerColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boardProd ::= boardProd boardAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // boardProd ::= boardAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // boardAttribute ::= posxA ENTERO posxC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		pointBuilder.withPosX(Integer.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAttribute",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$0 ::= 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
pointBuilder.withPosY(Integer.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$0",73, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boardAttribute ::= posyA ENTERO posyC NT$0 typeA typeAttribute typeC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		boardBuilder.withType(type);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAttribute",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // typeAttribute ::= BRICK 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = XMLParserSym.terminalNames[type.getType()];
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeAttribute",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // typeAttribute ::= HALL 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = XMLParserSym.terminalNames[type.getType()];
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeAttribute",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pointProd ::= pointProd pointAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pointProd ::= pointAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pointAttribute ::= posxA ENTERO posxC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		pointBuilder.withPosX(Integer.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointAttribute",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pointAttribute ::= posyA ENTERO posyC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		pointBuilder.withPosY(Integer.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointAttribute",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // worldsA ::= MENOR_QUE WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsA",36, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsC",35, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // worldA ::= MENOR_QUE WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldA",37, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldC",38, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // nameA ::= MENOR_QUE NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameA",39, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameC",40, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rowsA ::= MENOR_QUE ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsA",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsC",22, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // colsA ::= MENOR_QUE COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsA",23, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsC",24, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // configA ::= MENOR_QUE CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configA",25, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configC",26, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorA",41, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorC",42, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorA",43, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorC",44, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorA",45, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorC",46, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorA",47, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorC",48, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorA",49, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorC",50, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorA",51, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // undefinedColorC ::= MENOR_QUE DIAGONAL UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorC",52, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorA",53, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorC",60, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boardA ::= MENOR_QUE BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardA",27, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardC",28, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // posxA ::= MENOR_QUE POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxA",54, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxC",55, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // posyA ::= MENOR_QUE POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyA",56, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyC",57, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // typeA ::= MENOR_QUE TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeA",58, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeC",59, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boxesA ::= MENOR_QUE BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesA",29, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesC",30, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // targetsA ::= MENOR_QUE TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsA",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsC",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // playerA ::= MENOR_QUE PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerA",33, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerC",34, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // errsA ::= MENOR_QUE ERRORS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errsA",61, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // errsC ::= MENOR_QUE DIAGONAL ERRORS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errsC",62, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // errA ::= MENOR_QUE ERROR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errA",63, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // errC ::= MENOR_QUE DIAGONAL ERROR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("errC",64, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lexemaA ::= MENOR_QUE LEXEMA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("lexemaA",65, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lexemaC ::= MENOR_QUE DIAGONAL LEXEMA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("lexemaC",66, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lineA ::= MENOR_QUE LINE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("lineA",67, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lineC ::= MENOR_QUE DIAGONAL LINE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("lineC",68, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // columnA ::= MENOR_QUE COLUMN MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("columnA",69, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // columnC ::= MENOR_QUE DIAGONAL COLUMN MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("columnC",70, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // descriptionA ::= MENOR_QUE DESCRIPTION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("descriptionA",71, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // descriptionC ::= MENOR_QUE DIAGONAL DESCRIPTION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("descriptionC",72, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$XMLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}
