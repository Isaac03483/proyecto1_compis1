
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.cliente.boxworld.compiler.parser;

import com.mio.cliente.boxworld.builders.ErrorBuilder;
import com.mio.cliente.boxworld.compiler.lexer.MovesLexer;
import com.mio.cliente.boxworld.compiler.parser.MovesParserSym;
import com.mio.cliente.boxworld.compiler.Token;
import com.mio.cliente.boxworld.models.ErrorType;
import com.mio.cliente.boxworld.models.Move;
import java.util.ArrayList;
import java.util.List;
import com.mio.cliente.boxworld.models.ParserError;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MovesParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MovesParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MovesParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MovesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MovesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\007" +
    "\000\002\004\004\000\002\004\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\013\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\003\000\002\006\005\000\002\006\005\000\002\006\004" +
    "\000\002\006\003\000\002\007\005\000\002\007\003\000" +
    "\002\007\004\000\002\010\006\000\002\010\003\000\002" +
    "\010\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\016\003\012\015\010\016\004\017\015\020" +
    "\013\021\011\001\002\000\004\010\ufff8\001\002\000\004" +
    "\010\023\001\002\000\020\002\021\003\012\015\010\016" +
    "\004\017\015\020\013\021\011\001\002\000\020\002\ufffd" +
    "\003\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\001" +
    "\002\000\004\010\ufff9\001\002\000\014\003\012\015\010" +
    "\016\004\017\015\020\013\001\002\000\006\011\017\012" +
    "\016\001\002\000\004\010\ufff6\001\002\000\020\002\uffff" +
    "\003\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\001" +
    "\002\000\004\010\ufff7\001\002\000\020\002\ufffb\003\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\001\002\000" +
    "\020\002\ufffa\003\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\001\002\000\020\002\ufffe\003\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\001\002\000\004\002\001" +
    "\001\002\000\020\002\000\003\000\015\000\016\000\017" +
    "\000\020\000\021\000\001\002\000\020\003\033\005\037" +
    "\010\040\013\027\014\024\022\026\023\036\001\002\000" +
    "\014\004\uffe8\005\uffe8\006\uffe8\007\uffe8\011\uffe8\001\002" +
    "\000\004\010\057\001\002\000\004\010\uffe7\001\002\000" +
    "\014\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\001\002" +
    "\000\004\011\055\001\002\000\014\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\011\uffec\001\002\000\014\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\011\uffee\001\002\000\004\011\054\001" +
    "\002\000\014\004\ufff2\005\ufff2\006\046\007\047\011\ufff2" +
    "\001\002\000\010\004\044\005\042\011\ufff5\001\002\000" +
    "\004\010\uffe6\001\002\000\016\003\033\010\040\013\027" +
    "\014\024\022\026\023\036\001\002\000\020\003\033\005" +
    "\037\010\040\013\027\014\024\022\026\023\036\001\002" +
    "\000\010\004\044\005\042\011\043\001\002\000\020\003" +
    "\033\005\037\010\040\013\027\014\024\022\026\023\036" +
    "\001\002\000\014\004\uffed\005\uffed\006\uffed\007\uffed\011" +
    "\uffed\001\002\000\020\003\033\005\037\010\040\013\027" +
    "\014\024\022\026\023\036\001\002\000\014\004\ufff4\005" +
    "\ufff4\006\046\007\047\011\ufff4\001\002\000\016\003\033" +
    "\010\040\013\027\014\024\022\026\023\036\001\002\000" +
    "\016\003\033\010\040\013\027\014\024\022\026\023\036" +
    "\001\002\000\014\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011" +
    "\ufff0\001\002\000\014\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\001\002\000\014\004\ufff3\005\ufff3\006\046\007" +
    "\047\011\ufff3\001\002\000\014\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\011\uffef\001\002\000\014\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\011\uffeb\001\002\000\004\012\056\001\002" +
    "\000\020\002\ufffc\003\ufffc\015\ufffc\016\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\001\002\000\020\003\033\005\037\010\040" +
    "\013\027\014\024\022\026\023\036\001\002\000\010\004" +
    "\044\005\042\011\061\001\002\000\014\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\011\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\012\002\005\003\013\004\006\011\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\021" +
    "\004\006\011\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\017\011\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\034\006\033\007" +
    "\031\010\030\012\024\013\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\052\010\030\012\024\001\001\000\014" +
    "\005\040\006\033\007\031\010\030\012\024\001\001\000" +
    "\002\001\001\000\012\006\051\007\031\010\030\012\024" +
    "\001\001\000\002\001\001\000\012\006\044\007\031\010" +
    "\030\012\024\001\001\000\002\001\001\000\010\007\050" +
    "\010\030\012\024\001\001\000\010\007\047\010\030\012" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\057\006\033\007\031" +
    "\010\030\012\024\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MovesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MovesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MovesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    List<ParserError> errors;
    public MovesParser(MovesLexer lexer){
        super(lexer);
        errors = new ArrayList<>();
    }

    public List<ParserError> getErrors() {
        return errors;
    }

    public Symbol scan() throws Exception {
        Symbol symbol = this.getScanner().next_token();
        if (symbol == null) {
            return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
            }

            while(symbol != null && symbol.sym == MovesParserSym.SYM) {
//                this.report_expected_token_ids();
                System.out.println("Ingorando: " + symbol.value.toString());
                Token token = (Token) symbol.value;
                errors.add(
                        new ParserError(new ErrorBuilder().withLexema(token.getValue())
                                .withLine(token.getLine()).withColumn(token.getColumn())
                                .withErrorType(ErrorType.LEXICO).withDescription("Este error no se encuentra en el lenguaje.")
                        )
                );
                symbol = this.getScanner().next_token();
            }

            if (symbol == null) {
                return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
            }

            return symbol;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;

        if (cur_token.sym == MovesParserSym.EOF) {
    //          String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Simbolo inesperado";
            errors.add(
                    new ParserError(new ErrorBuilder().withLexema("").withLine(token.getLine())
                            .withColumn(token.getColumn()).withErrorType(ErrorType.SEMANTICO).withDescription(er)
                    )

            );
            System.out.println(er);
        } else {
            String er = "Simbolo inesperado";
            errors.add(
                    new ParserError(new ErrorBuilder().withLexema(token.getValue()).withLine(token.getLine())
                            .withColumn(token.getColumn()).withErrorType(ErrorType.SEMANTICO).withDescription(er)
                    )
            );

            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == MovesParserSym.EOF) {
            Token token = (Token) cur_token.value;
            String er = "Error irrecuperable se llego al final del archivo";
            errors.add(
                    new ParserError(new ErrorBuilder().withLexema("Fin del archivo").withLine(token.getLine())
                            .withColumn(token.getColumn()).withErrorType(ErrorType.SEMANTICO).withDescription(er)
                    )
            );
            System.out.println(er);
        } else {
            Token token = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            errors.add(
                    new ParserError(new ErrorBuilder().withLexema(token.getValue()).withLine(token.getLine())
                            .withColumn(token.getColumn()).withErrorType(ErrorType.SEMANTICO).withDescription(er)
                    )
            );
            System.out.println(er);
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MovesParser$actions {
  private final MovesParser parser;

  /** Constructor */
  CUP$MovesParser$actions(MovesParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$MovesParser$do_action_part00000000(
    int                        CUP$MovesParser$act_num,
    java_cup.runtime.lr_parser CUP$MovesParser$parser,
    java.util.Stack            CUP$MovesParser$stack,
    int                        CUP$MovesParser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$MovesParser$result;

      /* select the action based on the action number */
      switch (CUP$MovesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int start_valright = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		ArrayList<Move> start_val = (ArrayList<Move>)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		RESULT = start_val;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MovesParser$parser.done_parsing();
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= main movProd 
            {
              ArrayList<Move> RESULT =null;
		int movesleft = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int movesright = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		ArrayList<Move> moves = (ArrayList<Move>)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		int mleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((Symbol) CUP$MovesParser$stack.peek()).value;
		moves.add(m);
                                                RESULT = moves;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("main",0, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= movProd 
            {
              ArrayList<Move> RESULT =null;
		int mleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = new ArrayList<Move>();
                                                RESULT.add(m);
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("main",0, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // movProd ::= PUSH dirProd 
            {
              Move RESULT =null;
		int mleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((Symbol) CUP$MovesParser$stack.peek()).value;
		m.setPush(true);
                                                  RESULT = m;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("movProd",1, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // movProd ::= dirProd 
            {
              Move RESULT =null;
		int mleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = m;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("movProd",1, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dirProd ::= direccion PARENTESIS_A numero PARENTESIS_C PUNTO_COMA 
            {
              Move RESULT =null;
		int dleft = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)).left;
		int dright = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)).right;
		Integer d = (Integer)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)).value;
		int n1left = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Integer n1 = (Integer)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		RESULT = new Move(false,d,n1);
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("dirProd",2, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dirProd ::= error PUNTO_COMA 
            {
              Move RESULT =null;

              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("dirProd",2, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dirProd ::= error PARENTESIS_C 
            {
              Move RESULT =null;

              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("dirProd",2, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // direccion ::= RIGHT 
            {
              Integer RESULT =null;
		int dleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // direccion ::= LEFT 
            {
              Integer RESULT =null;
		int dleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // direccion ::= UP 
            {
              Integer RESULT =null;
		int dleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // direccion ::= DOWN 
            {
              Integer RESULT =null;
		int dleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numero ::= a 
            {
              Integer RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1.intValue();
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("numero",9, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // a ::= a SUMA b 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int n2left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1 + n2;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("a",3, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // a ::= a RESTA b 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int n2left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1 - n2;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("a",3, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // a ::= b 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("a",3, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b ::= b MULTIPLICACION c 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int n2left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1 * n2;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b ::= b DIVISION c 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int dleft = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int dright = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		Token d = (Token)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		int n2left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		
        if(n2 == 0){
            errors.add(
                new ParserError(
                    new ErrorBuilder().withLexema(String.valueOf(n2)).withLine(d.getLine()).withColumn(d.getColumn()).withErrorType(ErrorType.SEMANTICO).withDescription("Imposible dividir entre 0.")
                )
            );
            n2 = 1.0;
        }
        RESULT = n1 / n2;
    
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // b ::= RESTA c 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = -1 * n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // b ::= c 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c ::= PARENTESIS_A a PARENTESIS_C 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("c",5, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c ::= d 
            {
              Double RESULT =null;
		int n1left = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("c",5, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c ::= error PARENTESIS_C 
            {
              Double RESULT =null;

              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("c",5, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // d ::= funcion PARENTESIS_A a PARENTESIS_C 
            {
              Double RESULT =null;
		int fleft = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)).left;
		int fright = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)).right;
		Integer f = (Integer)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)).value;
		int n1left = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int n1right = ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		Double n1 = (Double)((Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		RESULT = f == MovesParserSym.FLOOR ? Math.floor(n1): Math.ceil(n1);
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("d",6, ((Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // d ::= ENTERO 
            {
              Double RESULT =null;
		int eleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int eright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token e = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Double.valueOf(e.getValue());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("d",6, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // d ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Double.valueOf(d.getValue());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("d",6, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= FLOOR 
            {
              Integer RESULT =null;
		int fleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int fright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token f = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = f.getType();
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcion ::= CEIL 
            {
              Integer RESULT =null;
		int cleft = ((Symbol)CUP$MovesParser$stack.peek()).left;
		int cright = ((Symbol)CUP$MovesParser$stack.peek()).right;
		Token c = (Token)((Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = c.getType();
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((Symbol)CUP$MovesParser$stack.peek()), ((Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MovesParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$MovesParser$do_action(
    int                        CUP$MovesParser$act_num,
    java_cup.runtime.lr_parser CUP$MovesParser$parser,
    java.util.Stack            CUP$MovesParser$stack,
    int                        CUP$MovesParser$top)
    throws Exception
    {
              return CUP$MovesParser$do_action_part00000000(
                               CUP$MovesParser$act_num,
                               CUP$MovesParser$parser,
                               CUP$MovesParser$stack,
                               CUP$MovesParser$top);
    }
}

}
