
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.cliente.boxworld.compiler.parser;

import com.mio.cliente.boxworld.compiler.lexer.MovesLexer;
import com.mio.cliente.boxworld.compiler.Token;
import com.mio.cliente.boxworld.models.Move;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MovesParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MovesParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MovesParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MovesParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MovesParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\007" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\013\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\006\000\002\010\003\000" +
    "\002\010\003\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\014\015\010\016\004\017\014\020\012\021" +
    "\011\001\002\000\004\010\ufffa\001\002\000\004\010\020" +
    "\001\002\000\016\002\016\015\010\016\004\017\014\020" +
    "\012\021\011\001\002\000\016\002\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\001\002\000\004\010\ufffb\001" +
    "\002\000\012\015\010\016\004\017\014\020\012\001\002" +
    "\000\004\010\ufff8\001\002\000\016\002\uffff\015\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\001\002\000\004\010\ufff9" +
    "\001\002\000\016\002\ufffe\015\ufffe\016\ufffe\017\ufffe\020" +
    "\ufffe\021\ufffe\001\002\000\004\002\001\001\002\000\016" +
    "\002\000\015\000\016\000\017\000\020\000\021\000\001" +
    "\002\000\016\005\034\010\033\013\024\014\021\022\022" +
    "\023\032\001\002\000\014\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\011\uffeb\001\002\000\004\010\uffea\001\002\000\004" +
    "\010\052\001\002\000\014\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\011\uffec\001\002\000\004\011\050\001\002\000\014" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\001\002\000" +
    "\014\004\ufff0\005\ufff0\006\ufff0\007\ufff0\011\ufff0\001\002" +
    "\000\014\004\ufff4\005\ufff4\006\043\007\044\011\ufff4\001" +
    "\002\000\010\004\041\005\037\011\ufff7\001\002\000\004" +
    "\010\uffe9\001\002\000\016\005\034\010\033\013\024\014" +
    "\021\022\022\023\032\001\002\000\014\010\033\013\024" +
    "\014\021\022\022\023\032\001\002\000\014\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\001\002\000\010\004\041" +
    "\005\037\011\040\001\002\000\016\005\034\010\033\013" +
    "\024\014\021\022\022\023\032\001\002\000\014\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\011\uffef\001\002\000\016\005" +
    "\034\010\033\013\024\014\021\022\022\023\032\001\002" +
    "\000\014\004\ufff6\005\ufff6\006\043\007\044\011\ufff6\001" +
    "\002\000\014\010\033\013\024\014\021\022\022\023\032" +
    "\001\002\000\014\010\033\013\024\014\021\022\022\023" +
    "\032\001\002\000\014\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\011\ufff2\001\002\000\014\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\011\ufff3\001\002\000\014\004\ufff5\005\ufff5\006\043" +
    "\007\044\011\ufff5\001\002\000\004\012\051\001\002\000" +
    "\016\002\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc" +
    "\001\002\000\016\005\034\010\033\013\024\014\021\022" +
    "\022\023\032\001\002\000\010\004\041\005\037\011\054" +
    "\001\002\000\014\004\uffed\005\uffed\006\uffed\007\uffed\011" +
    "\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\012\002\005\003\012\004\006\011\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\016" +
    "\004\006\011\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\014\011\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\030\006\027" +
    "\007\026\010\025\012\022\013\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\035\006\027\007\026\010\025\012\022\001\001\000" +
    "\010\007\034\010\025\012\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\046\007\026\010\025\012" +
    "\022\001\001\000\002\001\001\000\012\006\041\007\026" +
    "\010\025\012\022\001\001\000\002\001\001\000\010\007" +
    "\045\010\025\012\022\001\001\000\010\007\044\010\025" +
    "\012\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\052\006\027\007\026\010\025\012\022\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MovesParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MovesParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MovesParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public MovesParser(MovesLexer lexer){
        super(lexer);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MovesParser$actions {
  private final MovesParser parser;

  /** Constructor */
  CUP$MovesParser$actions(MovesParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MovesParser$do_action_part00000000(
    int                        CUP$MovesParser$act_num,
    java_cup.runtime.lr_parser CUP$MovesParser$parser,
    java.util.Stack            CUP$MovesParser$stack,
    int                        CUP$MovesParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MovesParser$result;

      /* select the action based on the action number */
      switch (CUP$MovesParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		ArrayList<Move> start_val = (ArrayList<Move>)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		RESULT = start_val;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MovesParser$parser.done_parsing();
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= main movProd 
            {
              ArrayList<Move> RESULT =null;
		int movesleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int movesright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		ArrayList<Move> moves = (ArrayList<Move>)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		moves.add(m);
                                                RESULT = moves;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= movProd 
            {
              ArrayList<Move> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = new ArrayList<Move>();
                                                RESULT.add(m);
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // movProd ::= PUSH dirProd 
            {
              Move RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		m.setPush(true);
                                                  RESULT = m;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("movProd",1, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // movProd ::= dirProd 
            {
              Move RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Move m = (Move)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = m;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("movProd",1, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dirProd ::= direccion PARENTESIS_A numero PARENTESIS_C PUNTO_COMA 
            {
              Move RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		RESULT = new Move(false,d,n1);
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("dirProd",2, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-4)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // direccion ::= RIGHT 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // direccion ::= LEFT 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // direccion ::= UP 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // direccion ::= DOWN 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Integer.valueOf(d.getType());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("direccion",7, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // numero ::= a 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1.intValue();
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("numero",9, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // a ::= a SUMA b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1 + n2;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("a",3, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // a ::= a RESTA b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1 - n2;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("a",3, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // a ::= b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("a",3, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // b ::= b MULTIPLICACION c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1 * n2;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // b ::= b DIVISION c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1 / n2;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // b ::= RESTA c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = -1 * n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // b ::= c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("b",4, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // c ::= PARENTESIS_A a PARENTESIS_C 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-2)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c ::= d 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = n1;
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("c",5, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // d ::= funcion PARENTESIS_A a PARENTESIS_C 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-1)).value;
		RESULT = f == MovesParserSym.FLOOR ? Math.floor(n1): Math.ceil(n1);
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("d",6, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.elementAt(CUP$MovesParser$top-3)), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // d ::= ENTERO 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Double.valueOf(e.getValue());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("d",6, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // d ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = Double.valueOf(d.getValue());
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("d",6, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funcion ::= FLOOR 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = f.getType();
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcion ::= CEIL 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$MovesParser$stack.peek()).value;
		RESULT = c.getType();
              CUP$MovesParser$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MovesParser$stack.peek()), RESULT);
            }
          return CUP$MovesParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MovesParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MovesParser$do_action(
    int                        CUP$MovesParser$act_num,
    java_cup.runtime.lr_parser CUP$MovesParser$parser,
    java.util.Stack            CUP$MovesParser$stack,
    int                        CUP$MovesParser$top)
    throws java.lang.Exception
    {
              return CUP$MovesParser$do_action_part00000000(
                               CUP$MovesParser$act_num,
                               CUP$MovesParser$parser,
                               CUP$MovesParser$stack,
                               CUP$MovesParser$top);
    }
}

}
