
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.server.compiler.parser;

import com.mio.server.builders.*;
import com.mio.server.compiler.Token;
import com.mio.server.compiler.lexer.XMLLexer;
import com.mio.server.models.World;
import java_cup.runtime.Symbol;

import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return XMLParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\013\006\000\002\002" +
    "\015\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\003\004\000\002\003\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\011\004\000\002\011\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\007\004\000\002\007\003\000\002\010\005\000\002\067" +
    "\002\000\002\010\011\000\002\016\003\000\002\016\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\005\000" +
    "\002\006\005\000\002\036\005\000\002\035\006\000\002" +
    "\037\005\000\002\040\006\000\002\041\005\000\002\042" +
    "\006\000\002\017\005\000\002\020\006\000\002\021\005" +
    "\000\002\022\006\000\002\023\005\000\002\024\006\000" +
    "\002\043\005\000\002\044\006\000\002\045\005\000\002" +
    "\046\006\000\002\047\005\000\002\050\006\000\002\051" +
    "\005\000\002\052\006\000\002\053\005\000\002\054\006" +
    "\000\002\055\005\000\002\056\006\000\002\057\005\000" +
    "\002\066\006\000\002\025\005\000\002\026\006\000\002" +
    "\060\005\000\002\061\006\000\002\062\005\000\002\063" +
    "\006\000\002\064\005\000\002\065\006\000\002\027\005" +
    "\000\002\030\006\000\002\031\005\000\002\032\006\000" +
    "\002\033\005\000\002\034\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\021\005\001\002\000\004\002\336\001" +
    "\002\000\004\032\324\001\002\000\004\021\007\001\002" +
    "\000\004\015\322\001\002\000\004\021\011\001\002\000" +
    "\004\014\316\001\002\000\004\021\312\001\002\000\004" +
    "\021\ufffd\001\002\000\004\021\024\001\002\000\004\044" +
    "\304\001\002\000\004\021\ufffa\001\002\000\004\044\276" +
    "\001\002\000\004\021\147\001\002\000\004\021\147\001" +
    "\002\000\004\021\147\001\002\000\004\021\222\001\002" +
    "\000\022\004\210\005\202\006\203\007\204\010\201\011" +
    "\207\012\205\013\206\001\002\000\004\021\147\001\002" +
    "\000\004\021\045\001\002\000\004\045\030\001\002\000" +
    "\004\021\032\001\002\000\004\021\ufff9\001\002\000\004" +
    "\040\033\001\002\000\004\004\034\001\002\000\004\022" +
    "\035\001\002\000\004\021\uffd8\001\002\000\004\041\140" +
    "\001\002\000\004\041\132\001\002\000\004\041\124\001" +
    "\002\000\004\041\116\001\002\000\004\041\110\001\002" +
    "\000\004\021\103\001\002\000\004\021\ufff0\001\002\000" +
    "\020\023\066\024\072\025\070\026\071\027\065\030\064" +
    "\031\067\001\002\000\004\041\056\001\002\000\004\041" +
    "\050\001\002\000\004\021\052\001\002\000\004\021\uffef" +
    "\001\002\000\004\040\053\001\002\000\004\023\054\001" +
    "\002\000\004\022\055\001\002\000\004\021\uffd0\001\002" +
    "\000\004\021\057\001\002\000\004\040\061\001\002\000" +
    "\004\021\uffed\001\002\000\004\025\062\001\002\000\004" +
    "\022\063\001\002\000\004\021\uffcc\001\002\000\004\022" +
    "\101\001\002\000\004\022\100\001\002\000\004\022\077" +
    "\001\002\000\004\022\076\001\002\000\004\022\075\001" +
    "\002\000\004\022\074\001\002\000\004\022\073\001\002" +
    "\000\004\041\uffcf\001\002\000\004\041\uffc7\001\002\000" +
    "\004\041\uffcd\001\002\000\004\041\uffc5\001\002\000\004" +
    "\041\uffd1\001\002\000\004\041\uffcb\001\002\000\004\041" +
    "\uffc9\001\002\000\004\021\ufff1\001\002\000\022\023\066" +
    "\024\072\025\070\026\071\027\065\030\064\031\067\040" +
    "\105\001\002\000\004\021\ufff6\001\002\000\004\010\106" +
    "\001\002\000\004\022\107\001\002\000\004\021\uffd2\001" +
    "\002\000\004\021\111\001\002\000\004\040\113\001\002" +
    "\000\004\021\uffee\001\002\000\004\024\114\001\002\000" +
    "\004\022\115\001\002\000\004\021\uffce\001\002\000\004" +
    "\021\120\001\002\000\004\021\uffeb\001\002\000\004\040" +
    "\121\001\002\000\004\030\122\001\002\000\004\022\123" +
    "\001\002\000\004\021\uffc8\001\002\000\004\021\125\001" +
    "\002\000\004\040\127\001\002\000\004\021\uffea\001\002" +
    "\000\004\026\130\001\002\000\004\022\131\001\002\000" +
    "\004\021\uffc6\001\002\000\004\021\133\001\002\000\004" +
    "\040\135\001\002\000\004\021\uffec\001\002\000\004\027" +
    "\136\001\002\000\004\022\137\001\002\000\004\021\uffca" +
    "\001\002\000\004\021\141\001\002\000\004\040\143\001" +
    "\002\000\004\021\uffe9\001\002\000\004\031\144\001\002" +
    "\000\004\022\145\001\002\000\004\021\uffc4\001\002\000" +
    "\004\044\173\001\002\000\006\017\166\020\165\001\002" +
    "\000\004\021\161\001\002\000\004\021\uffe0\001\002\000" +
    "\004\044\153\001\002\000\004\021\154\001\002\000\004" +
    "\040\156\001\002\000\004\021\uffdf\001\002\000\004\017" +
    "\157\001\002\000\004\022\160\001\002\000\004\021\uffc0" +
    "\001\002\000\010\017\166\020\165\040\164\001\002\000" +
    "\004\021\uffe1\001\002\000\004\021\ufff3\001\002\000\004" +
    "\011\171\001\002\000\004\022\170\001\002\000\004\022" +
    "\167\001\002\000\004\044\uffc1\001\002\000\004\044\uffbf" +
    "\001\002\000\004\022\172\001\002\000\004\021\uffb8\001" +
    "\002\000\004\021\174\001\002\000\004\040\176\001\002" +
    "\000\004\021\uffde\001\002\000\004\020\177\001\002\000" +
    "\004\022\200\001\002\000\004\021\uffbe\001\002\000\004" +
    "\022\220\001\002\000\004\022\217\001\002\000\004\022" +
    "\216\001\002\000\004\022\215\001\002\000\004\022\214" +
    "\001\002\000\004\022\213\001\002\000\004\022\212\001" +
    "\002\000\004\022\211\001\002\000\004\045\uffd9\001\002" +
    "\000\004\021\uffb9\001\002\000\004\021\uffc3\001\002\000" +
    "\004\021\uffbb\001\002\000\004\021\uffb7\001\002\000\004" +
    "\044\uffd5\001\002\000\004\044\uffd7\001\002\000\004\021" +
    "\uffd3\001\002\000\004\021\ufffb\001\002\000\024\004\210" +
    "\005\202\006\203\007\204\010\201\011\207\012\205\013" +
    "\206\040\224\001\002\000\004\021\ufffc\001\002\000\004" +
    "\014\225\001\002\000\004\022\226\001\002\000\004\021" +
    "\uffda\001\002\000\004\021\230\001\002\000\010\017\166" +
    "\020\165\040\232\001\002\000\004\021\ufff2\001\002\000" +
    "\004\007\233\001\002\000\004\022\234\001\002\000\004" +
    "\021\uffb6\001\002\000\004\044\251\001\002\000\004\021" +
    "\244\001\002\000\004\021\uffe7\001\002\000\004\044\241" +
    "\001\002\000\004\021\154\001\002\000\004\021\uffe6\001" +
    "\002\000\004\021\uffe8\001\002\000\010\017\166\020\165" +
    "\040\246\001\002\000\004\021\ufff5\001\002\000\004\013" +
    "\247\001\002\000\004\022\250\001\002\000\004\021\uffc2" +
    "\001\002\000\004\021\174\001\002\000\004\021\uffe5\001" +
    "\002\000\004\021\254\001\002\000\004\016\266\001\002" +
    "\000\006\042\260\043\257\001\002\000\004\021\261\001" +
    "\002\000\004\021\uffe3\001\002\000\004\021\uffe2\001\002" +
    "\000\004\040\263\001\002\000\004\021\uffe4\001\002\000" +
    "\004\016\264\001\002\000\004\022\265\001\002\000\004" +
    "\021\uffbc\001\002\000\004\022\267\001\002\000\006\042" +
    "\uffbd\043\uffbd\001\002\000\004\021\272\001\002\000\004" +
    "\021\ufff4\001\002\000\010\017\166\020\165\040\273\001" +
    "\002\000\004\012\274\001\002\000\004\022\275\001\002" +
    "\000\004\021\uffba\001\002\000\004\021\277\001\002\000" +
    "\004\040\301\001\002\000\004\021\ufff8\001\002\000\004" +
    "\005\302\001\002\000\004\022\303\001\002\000\004\021" +
    "\uffd6\001\002\000\004\021\306\001\002\000\004\021\ufff7" +
    "\001\002\000\004\040\307\001\002\000\004\006\310\001" +
    "\002\000\004\022\311\001\002\000\004\021\uffd4\001\002" +
    "\000\006\014\316\040\315\001\002\000\004\021\ufffe\001" +
    "\002\000\004\002\000\001\002\000\004\015\320\001\002" +
    "\000\004\022\317\001\002\000\004\021\uffdb\001\002\000" +
    "\004\022\321\001\002\000\004\002\uffdc\001\002\000\004" +
    "\022\323\001\002\000\004\021\uffdd\001\002\000\004\033" +
    "\325\001\002\000\004\034\326\001\002\000\004\035\327" +
    "\001\002\000\004\036\330\001\002\000\004\037\331\001" +
    "\002\000\004\035\332\001\002\000\004\036\333\001\002" +
    "\000\004\032\334\001\002\000\004\022\335\001\002\000" +
    "\004\021\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\006\002\005\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\007\001\001\000\002" +
    "\001\001\000\010\014\011\015\012\037\013\001\001\000" +
    "\002\001\001\000\010\015\312\035\313\037\013\001\001" +
    "\000\002\001\001\000\026\003\022\004\015\017\016\021" +
    "\014\023\025\025\020\027\017\031\024\033\021\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\267\006\150\060\151\062\145\001\001" +
    "\000\012\007\235\010\236\060\237\062\234\001\001\000" +
    "\012\005\226\006\150\060\151\062\145\001\001\000\026" +
    "\004\220\017\016\021\014\023\025\025\020\027\017\031" +
    "\024\033\021\040\222\041\026\001\001\000\002\001\001" +
    "\000\012\005\147\006\150\060\151\062\145\001\001\000" +
    "\024\011\042\012\043\043\046\045\041\047\045\051\036" +
    "\053\040\055\037\057\035\001\001\000\002\001\001\000" +
    "\004\042\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\101\024\103\043" +
    "\046\045\041\047\045\051\036\053\040\055\037\057\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\161\032\162\060\151\062\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\161\034\230" +
    "\060\151\062\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\242\026\244\060\237\062" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\251\001\001\000" +
    "\004\067\252\001\001\000\004\064\254\001\001\000\002" +
    "\001\001\000\004\016\255\001\001\000\004\065\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\161\030\270\060\151\062\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private WorldBuilder worldBuilder;
    private WConfigBuilder configBuilder;
    private PointBuilder pointBuilder;
    private BoardBuilder boardBuilder;
    public XMLParser(XMLLexer lexer){
        super(lexer);
        this.worldBuilder = new WorldBuilder();
        this.configBuilder = new WConfigBuilder();
        this.pointBuilder = new PointBuilder();
        this.boardBuilder = new BoardBuilder();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /*. . . . . . . . . . . . . . . . . . . .*/
        /* . . . . . .*/
        // $START ::= main EOF
        /* ACCEPT */
        if (CUP$XMLParser$act_num == 0) {
            Object RESULT = null;
            int start_valleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int start_valright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            ArrayList<World> start_val = (ArrayList<World>) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            RESULT = start_val;
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            CUP$XMLParser$parser.done_parsing();
            return CUP$XMLParser$result;
// main ::= encoding worldsA worldsProd worldsC
        } else if (CUP$XMLParser$act_num == 1) {
            ArrayList<World> RESULT = null;
            int wsleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int wsright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            ArrayList<World> ws = (ArrayList<World>) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            RESULT = ws;
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("main", 9, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 2) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("encoding", 0, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 10)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// worldsProd ::= worldsProd worldProd
        } else if (CUP$XMLParser$act_num == 3) {
            ArrayList<World> RESULT = null;
            int arrayleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int arrayright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            ArrayList<World> array = (ArrayList<World>) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            int worldleft = ((Symbol) CUP$XMLParser$stack.peek()).left;
            int worldright = ((Symbol) CUP$XMLParser$stack.peek()).right;
            World world = (World) ((Symbol) CUP$XMLParser$stack.peek()).value;
            array.add(world);
            System.out.println(world);
            RESULT = array;
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsProd", 10, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// worldsProd ::= worldProd
        } else if (CUP$XMLParser$act_num == 4) {
            ArrayList<World> RESULT = null;
            int worldleft = ((Symbol) CUP$XMLParser$stack.peek()).left;
            int worldright = ((Symbol) CUP$XMLParser$stack.peek()).right;
            World world = (World) ((Symbol) CUP$XMLParser$stack.peek()).value;
            RESULT = new ArrayList<World>();
            System.out.println(world);
            RESULT.add(world);
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsProd", 10, ((Symbol) CUP$XMLParser$stack.peek()), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// worldProd ::= worldA attributes worldC
        } else if (CUP$XMLParser$act_num == 5) {
            World RESULT = null;
            RESULT = worldBuilder.build();
            worldBuilder.clean();
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldProd", 11, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attributes ::= attributes attribute
        } else if (CUP$XMLParser$act_num == 6) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes", 1, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attributes ::= attribute
        } else if (CUP$XMLParser$act_num == 7) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes", 1, ((Symbol) CUP$XMLParser$stack.peek()), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= nameA PALABRA nameC
        } else if (CUP$XMLParser$act_num == 8) {
            Object RESULT = null;
            int nombreleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int nombreright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token nombre = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            worldBuilder.withName(nombre.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= rowsA ENTERO rowsC
        } else if (CUP$XMLParser$act_num == 9) {
            Object RESULT = null;
            int enteroleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int enteroright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token entero = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            worldBuilder.withRows(Double.valueOf(entero.getValue()));
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= colsA ENTERO colsC
        } else if (CUP$XMLParser$act_num == 10) {
            Object RESULT = null;
            int enteroleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int enteroright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token entero = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            worldBuilder.withCols(Double.valueOf(entero.getValue()));
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= configA configProd configC
        } else if (CUP$XMLParser$act_num == 11) {
            Object RESULT = null;
            worldBuilder.withConfig(configBuilder.build());
            configBuilder.clean();
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= boardA boardProd boardC
        } else if (CUP$XMLParser$act_num == 12) {
            Object RESULT = null;
            worldBuilder.withBoard(boardBuilder.withPoint(pointBuilder.build()).build());
            pointBuilder.clean();
            boardBuilder.clean();
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= boxesA pointProd boxesC
        } else if (CUP$XMLParser$act_num == 13) {
            Object RESULT = null;
            worldBuilder.withBox(pointBuilder.build());
            pointBuilder.clean();
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= targetsA pointProd targetsC
        } else if (CUP$XMLParser$act_num == 14) {
            Object RESULT = null;
            worldBuilder.withTarget(pointBuilder.build());
            pointBuilder.clean();
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// attribute ::= playerA pointProd playerC
        } else if (CUP$XMLParser$act_num == 15) {
            Object RESULT = null;
            worldBuilder.withPlayer(pointBuilder.build());
            pointBuilder.clean();
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute", 2, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configProd ::= configProd configAttribute
        } else if (CUP$XMLParser$act_num == 16) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd", 7, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configProd ::= configAttribute
        } else if (CUP$XMLParser$act_num == 17) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd", 7, ((Symbol) CUP$XMLParser$stack.peek()), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configAttribute ::= boxColorA HEXADECIMAL boxColorC
        } else if (CUP$XMLParser$act_num == 18) {
            Object RESULT = null;
            int hleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int hright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token h = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            configBuilder.withBoxColor(h.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 8, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configAttribute ::= boxOnTargetColorA HEXADECIMAL boxOnTargetColorC
        } else if (CUP$XMLParser$act_num == 19) {
            Object RESULT = null;
            int hleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int hright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token h = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            configBuilder.withBoxOnTargetColor(h.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 8, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configAttribute ::= targetColorA HEXADECIMAL targetColorC
        } else if (CUP$XMLParser$act_num == 20) {
            Object RESULT = null;
            int hleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int hright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token h = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            configBuilder.withTargetColor(h.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 8, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configAttribute ::= brickColorA HEXADECIMAL brickColorC
        } else if (CUP$XMLParser$act_num == 21) {
            Object RESULT = null;
            int hleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int hright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token h = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            configBuilder.withBrickColor(h.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 8, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configAttribute ::= hallColorA HEXADECIMAL hallColorC
        } else if (CUP$XMLParser$act_num == 22) {
            Object RESULT = null;
            int hleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int hright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token h = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            configBuilder.withHallColor(h.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 8, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configAttribute ::= undefinedColorA HEXADECIMAL undefinedColorC
        } else if (CUP$XMLParser$act_num == 23) {
            Object RESULT = null;
            int hleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int hright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token h = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            configBuilder.withUndefinedColor(h.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 8, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configAttribute ::= playerColorA HEXADECIMAL playerColorC
        } else if (CUP$XMLParser$act_num == 24) {
            Object RESULT = null;
            int hleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int hright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token h = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            configBuilder.withPlayerColor(h.getValue());
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 8, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boardProd ::= boardProd boardAttribute
        } else if (CUP$XMLParser$act_num == 25) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd", 5, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boardProd ::= boardAttribute
        } else if (CUP$XMLParser$act_num == 26) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd", 5, ((Symbol) CUP$XMLParser$stack.peek()), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boardAttribute ::= posxA ENTERO posxC
        } else if (CUP$XMLParser$act_num == 27) {
            Object RESULT = null;
            int enteroleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int enteroright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token entero = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            pointBuilder.withPosX(Double.valueOf(entero.getValue()));
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAttribute", 6, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// NT$0 ::=
        } else if (CUP$XMLParser$act_num == 28) {
            Object RESULT = null;
            int enteroleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int enteroright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token entero = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            pointBuilder.withPosY(Double.valueOf(entero.getValue()));
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$0", 53, ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boardAttribute ::= posyA ENTERO posyC NT$0 typeA typeAttribute typeC
        } else if (CUP$XMLParser$act_num == 29) {
            Object RESULT = null;
            // propagate RESULT from NT$0
            RESULT = (Object) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)).value;
            int enteroleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 5)).left;
            int enteroright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 5)).right;
            Token entero = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 5)).value;
            int typeleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int typeright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            String type = (String) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            boardBuilder.withType(type);
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAttribute", 6, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 6)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// typeAttribute ::= BRICK
        } else if (CUP$XMLParser$act_num == 30) {
            String RESULT = null;
            int typeleft = ((Symbol) CUP$XMLParser$stack.peek()).left;
            int typeright = ((Symbol) CUP$XMLParser$stack.peek()).right;
            Token type = (Token) ((Symbol) CUP$XMLParser$stack.peek()).value;
            RESULT = XMLParserSym.terminalNames[type.getType()];
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeAttribute", 12, ((Symbol) CUP$XMLParser$stack.peek()), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// typeAttribute ::= HALL
        } else if (CUP$XMLParser$act_num == 31) {
            String RESULT = null;
            int typeleft = ((Symbol) CUP$XMLParser$stack.peek()).left;
            int typeright = ((Symbol) CUP$XMLParser$stack.peek()).right;
            Token type = (Token) ((Symbol) CUP$XMLParser$stack.peek()).value;
            RESULT = XMLParserSym.terminalNames[type.getType()];
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeAttribute", 12, ((Symbol) CUP$XMLParser$stack.peek()), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// pointProd ::= pointProd pointAttribute
        } else if (CUP$XMLParser$act_num == 32) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd", 3, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// pointProd ::= pointAttribute
        } else if (CUP$XMLParser$act_num == 33) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd", 3, ((Symbol) CUP$XMLParser$stack.peek()), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// pointAttribute ::= posxA ENTERO posxC
        } else if (CUP$XMLParser$act_num == 34) {
            Object RESULT = null;
            int enteroleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int enteroright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token entero = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            pointBuilder.withPosX(Double.valueOf(entero.getValue()));
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointAttribute", 4, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// pointAttribute ::= posyA ENTERO posyC
        } else if (CUP$XMLParser$act_num == 35) {
            Object RESULT = null;
            int enteroleft = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).left;
            int enteroright = ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).right;
            Token entero = (Token) ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 1)).value;
            pointBuilder.withPosY(Double.valueOf(entero.getValue()));
            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointAttribute", 4, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// worldsA ::= MENOR_QUE WORLDS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 36) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsA", 28, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 37) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsC", 27, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// worldA ::= MENOR_QUE WORLD MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 38) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldA", 29, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 39) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldC", 30, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// nameA ::= MENOR_QUE NAME MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 40) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameA", 31, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 41) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameC", 32, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// rowsA ::= MENOR_QUE ROWS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 42) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsA", 13, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 43) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsC", 14, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// colsA ::= MENOR_QUE COLS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 44) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsA", 15, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 45) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsC", 16, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configA ::= MENOR_QUE CONFIG MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 46) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configA", 17, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 47) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configC", 18, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 48) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorA", 33, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 49) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorC", 34, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 50) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorA", 35, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 51) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorC", 36, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 52) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorA", 37, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 53) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorC", 38, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 54) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorA", 39, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 55) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorC", 40, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 56) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorA", 41, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 57) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorC", 42, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 58) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorA", 43, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// undefinedColorC ::= MENOR_QUE DIAGONAL UNDEFINED_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 59) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorC", 44, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 60) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorA", 45, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 61) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorC", 52, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boardA ::= MENOR_QUE BOARD MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 62) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardA", 19, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 63) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardC", 20, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// posxA ::= MENOR_QUE POSX MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 64) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxA", 46, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 65) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxC", 47, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// posyA ::= MENOR_QUE POSY MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 66) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyA", 48, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 67) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyC", 49, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// typeA ::= MENOR_QUE TYPE MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 68) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeA", 50, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 69) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeC", 51, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boxesA ::= MENOR_QUE BOXES MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 70) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesA", 21, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 71) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesC", 22, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// targetsA ::= MENOR_QUE TARGETS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 72) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsA", 23, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 73) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsC", 24, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// playerA ::= MENOR_QUE PLAYER MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 74) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerA", 25, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 2)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
// playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE
        } else if (CUP$XMLParser$act_num == 75) {
            Object RESULT = null;

            CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerC", 26, ((Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top - 3)), ((Symbol) CUP$XMLParser$stack.peek()), RESULT);
            return CUP$XMLParser$result;
        }
        throw new Exception(
                "Invalid action number " + CUP$XMLParser$act_num + "found in internal parse table");
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}
