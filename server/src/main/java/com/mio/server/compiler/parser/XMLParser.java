
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.server.compiler.parser;

import com.mio.server.builders.*;
import com.mio.server.compiler.Token;
import com.mio.server.compiler.lexer.XMLLexer;
import com.mio.server.models.World;
import java.util.ArrayList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return XMLParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\013\006\000\002\002" +
    "\015\000\002\014\004\000\002\014\003\000\002\015\005" +
    "\000\002\003\004\000\002\003\003\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\011\004\000\002\011\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\007\004\000\002\007\003\000\002\010\005\000\002\067" +
    "\002\000\002\010\011\000\002\016\003\000\002\016\003" +
    "\000\002\005\004\000\002\005\003\000\002\006\005\000" +
    "\002\006\005\000\002\036\005\000\002\035\006\000\002" +
    "\037\005\000\002\040\006\000\002\041\005\000\002\042" +
    "\006\000\002\017\005\000\002\020\006\000\002\021\005" +
    "\000\002\022\006\000\002\023\005\000\002\024\006\000" +
    "\002\043\005\000\002\044\006\000\002\045\005\000\002" +
    "\046\006\000\002\047\005\000\002\050\006\000\002\051" +
    "\005\000\002\052\006\000\002\053\005\000\002\054\006" +
    "\000\002\055\005\000\002\056\006\000\002\057\005\000" +
    "\002\066\006\000\002\025\005\000\002\026\006\000\002" +
    "\060\005\000\002\061\006\000\002\062\005\000\002\063" +
    "\006\000\002\064\005\000\002\065\006\000\002\027\005" +
    "\000\002\030\006\000\002\031\005\000\002\032\006\000" +
    "\002\033\005\000\002\034\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\021\005\001\002\000\004\002\336\001" +
    "\002\000\004\032\324\001\002\000\004\021\007\001\002" +
    "\000\004\015\322\001\002\000\004\021\011\001\002\000" +
    "\004\014\316\001\002\000\004\021\312\001\002\000\004" +
    "\021\ufffd\001\002\000\004\021\024\001\002\000\004\044" +
    "\304\001\002\000\004\021\ufffa\001\002\000\004\044\276" +
    "\001\002\000\004\021\147\001\002\000\004\021\147\001" +
    "\002\000\004\021\147\001\002\000\004\021\222\001\002" +
    "\000\022\004\210\005\202\006\203\007\204\010\201\011" +
    "\207\012\205\013\206\001\002\000\004\021\147\001\002" +
    "\000\004\021\045\001\002\000\004\045\030\001\002\000" +
    "\004\021\032\001\002\000\004\021\ufff9\001\002\000\004" +
    "\040\033\001\002\000\004\004\034\001\002\000\004\022" +
    "\035\001\002\000\004\021\uffd8\001\002\000\004\041\140" +
    "\001\002\000\004\041\132\001\002\000\004\041\124\001" +
    "\002\000\004\041\116\001\002\000\004\041\110\001\002" +
    "\000\004\021\103\001\002\000\004\021\ufff0\001\002\000" +
    "\020\023\066\024\072\025\070\026\071\027\065\030\064" +
    "\031\067\001\002\000\004\041\056\001\002\000\004\041" +
    "\050\001\002\000\004\021\052\001\002\000\004\021\uffef" +
    "\001\002\000\004\040\053\001\002\000\004\023\054\001" +
    "\002\000\004\022\055\001\002\000\004\021\uffd0\001\002" +
    "\000\004\021\057\001\002\000\004\040\061\001\002\000" +
    "\004\021\uffed\001\002\000\004\025\062\001\002\000\004" +
    "\022\063\001\002\000\004\021\uffcc\001\002\000\004\022" +
    "\101\001\002\000\004\022\100\001\002\000\004\022\077" +
    "\001\002\000\004\022\076\001\002\000\004\022\075\001" +
    "\002\000\004\022\074\001\002\000\004\022\073\001\002" +
    "\000\004\041\uffcf\001\002\000\004\041\uffc7\001\002\000" +
    "\004\041\uffcd\001\002\000\004\041\uffc5\001\002\000\004" +
    "\041\uffd1\001\002\000\004\041\uffcb\001\002\000\004\041" +
    "\uffc9\001\002\000\004\021\ufff1\001\002\000\022\023\066" +
    "\024\072\025\070\026\071\027\065\030\064\031\067\040" +
    "\105\001\002\000\004\021\ufff6\001\002\000\004\010\106" +
    "\001\002\000\004\022\107\001\002\000\004\021\uffd2\001" +
    "\002\000\004\021\111\001\002\000\004\040\113\001\002" +
    "\000\004\021\uffee\001\002\000\004\024\114\001\002\000" +
    "\004\022\115\001\002\000\004\021\uffce\001\002\000\004" +
    "\021\120\001\002\000\004\021\uffeb\001\002\000\004\040" +
    "\121\001\002\000\004\030\122\001\002\000\004\022\123" +
    "\001\002\000\004\021\uffc8\001\002\000\004\021\125\001" +
    "\002\000\004\040\127\001\002\000\004\021\uffea\001\002" +
    "\000\004\026\130\001\002\000\004\022\131\001\002\000" +
    "\004\021\uffc6\001\002\000\004\021\133\001\002\000\004" +
    "\040\135\001\002\000\004\021\uffec\001\002\000\004\027" +
    "\136\001\002\000\004\022\137\001\002\000\004\021\uffca" +
    "\001\002\000\004\021\141\001\002\000\004\040\143\001" +
    "\002\000\004\021\uffe9\001\002\000\004\031\144\001\002" +
    "\000\004\022\145\001\002\000\004\021\uffc4\001\002\000" +
    "\004\044\173\001\002\000\006\017\166\020\165\001\002" +
    "\000\004\021\161\001\002\000\004\021\uffe0\001\002\000" +
    "\004\044\153\001\002\000\004\021\154\001\002\000\004" +
    "\040\156\001\002\000\004\021\uffdf\001\002\000\004\017" +
    "\157\001\002\000\004\022\160\001\002\000\004\021\uffc0" +
    "\001\002\000\010\017\166\020\165\040\164\001\002\000" +
    "\004\021\uffe1\001\002\000\004\021\ufff3\001\002\000\004" +
    "\011\171\001\002\000\004\022\170\001\002\000\004\022" +
    "\167\001\002\000\004\044\uffc1\001\002\000\004\044\uffbf" +
    "\001\002\000\004\022\172\001\002\000\004\021\uffb8\001" +
    "\002\000\004\021\174\001\002\000\004\040\176\001\002" +
    "\000\004\021\uffde\001\002\000\004\020\177\001\002\000" +
    "\004\022\200\001\002\000\004\021\uffbe\001\002\000\004" +
    "\022\220\001\002\000\004\022\217\001\002\000\004\022" +
    "\216\001\002\000\004\022\215\001\002\000\004\022\214" +
    "\001\002\000\004\022\213\001\002\000\004\022\212\001" +
    "\002\000\004\022\211\001\002\000\004\045\uffd9\001\002" +
    "\000\004\021\uffb9\001\002\000\004\021\uffc3\001\002\000" +
    "\004\021\uffbb\001\002\000\004\021\uffb7\001\002\000\004" +
    "\044\uffd5\001\002\000\004\044\uffd7\001\002\000\004\021" +
    "\uffd3\001\002\000\004\021\ufffb\001\002\000\024\004\210" +
    "\005\202\006\203\007\204\010\201\011\207\012\205\013" +
    "\206\040\224\001\002\000\004\021\ufffc\001\002\000\004" +
    "\014\225\001\002\000\004\022\226\001\002\000\004\021" +
    "\uffda\001\002\000\004\021\230\001\002\000\010\017\166" +
    "\020\165\040\232\001\002\000\004\021\ufff2\001\002\000" +
    "\004\007\233\001\002\000\004\022\234\001\002\000\004" +
    "\021\uffb6\001\002\000\004\044\251\001\002\000\004\021" +
    "\244\001\002\000\004\021\uffe7\001\002\000\004\044\241" +
    "\001\002\000\004\021\154\001\002\000\004\021\uffe6\001" +
    "\002\000\004\021\uffe8\001\002\000\010\017\166\020\165" +
    "\040\246\001\002\000\004\021\ufff5\001\002\000\004\013" +
    "\247\001\002\000\004\022\250\001\002\000\004\021\uffc2" +
    "\001\002\000\004\021\174\001\002\000\004\021\uffe5\001" +
    "\002\000\004\021\254\001\002\000\004\016\266\001\002" +
    "\000\006\042\260\043\257\001\002\000\004\021\261\001" +
    "\002\000\004\021\uffe3\001\002\000\004\021\uffe2\001\002" +
    "\000\004\040\263\001\002\000\004\021\uffe4\001\002\000" +
    "\004\016\264\001\002\000\004\022\265\001\002\000\004" +
    "\021\uffbc\001\002\000\004\022\267\001\002\000\006\042" +
    "\uffbd\043\uffbd\001\002\000\004\021\272\001\002\000\004" +
    "\021\ufff4\001\002\000\010\017\166\020\165\040\273\001" +
    "\002\000\004\012\274\001\002\000\004\022\275\001\002" +
    "\000\004\021\uffba\001\002\000\004\021\277\001\002\000" +
    "\004\040\301\001\002\000\004\021\ufff8\001\002\000\004" +
    "\005\302\001\002\000\004\022\303\001\002\000\004\021" +
    "\uffd6\001\002\000\004\021\306\001\002\000\004\021\ufff7" +
    "\001\002\000\004\040\307\001\002\000\004\006\310\001" +
    "\002\000\004\022\311\001\002\000\004\021\uffd4\001\002" +
    "\000\006\014\316\040\315\001\002\000\004\021\ufffe\001" +
    "\002\000\004\002\000\001\002\000\004\015\320\001\002" +
    "\000\004\022\317\001\002\000\004\021\uffdb\001\002\000" +
    "\004\022\321\001\002\000\004\002\uffdc\001\002\000\004" +
    "\022\323\001\002\000\004\021\uffdd\001\002\000\004\033" +
    "\325\001\002\000\004\034\326\001\002\000\004\035\327" +
    "\001\002\000\004\036\330\001\002\000\004\037\331\001" +
    "\002\000\004\035\332\001\002\000\004\036\333\001\002" +
    "\000\004\032\334\001\002\000\004\022\335\001\002\000" +
    "\004\021\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\006\002\005\013\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\007\001\001\000\002" +
    "\001\001\000\010\014\011\015\012\037\013\001\001\000" +
    "\002\001\001\000\010\015\312\035\313\037\013\001\001" +
    "\000\002\001\001\000\026\003\022\004\015\017\016\021" +
    "\014\023\025\025\020\027\017\031\024\033\021\041\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\267\006\150\060\151\062\145\001\001" +
    "\000\012\007\235\010\236\060\237\062\234\001\001\000" +
    "\012\005\226\006\150\060\151\062\145\001\001\000\026" +
    "\004\220\017\016\021\014\023\025\025\020\027\017\031" +
    "\024\033\021\040\222\041\026\001\001\000\002\001\001" +
    "\000\012\005\147\006\150\060\151\062\145\001\001\000" +
    "\024\011\042\012\043\043\046\045\041\047\045\051\036" +
    "\053\040\055\037\057\035\001\001\000\002\001\001\000" +
    "\004\042\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\012\101\024\103\043" +
    "\046\045\041\047\045\051\036\053\040\055\037\057\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\161\032\162\060\151\062\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\161\034\230" +
    "\060\151\062\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\242\026\244\060\237\062" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\251\001\001\000" +
    "\004\067\252\001\001\000\004\064\254\001\001\000\002" +
    "\001\001\000\004\016\255\001\001\000\004\065\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\161\030\270\060\151\062\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private WorldBuilder worldBuilder;
    private WConfigBuilder configBuilder;
    private PointBuilder pointBuilder;
    private BoardBuilder boardBuilder;
    public XMLParser(XMLLexer lexer){
        super(lexer);
        this.worldBuilder = new WorldBuilder();
        this.configBuilder = new WConfigBuilder();
        this.pointBuilder = new PointBuilder();
        this.boardBuilder = new BoardBuilder();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
      switch (CUP$XMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<World> start_val = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = start_val;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XMLParser$parser.done_parsing();
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= encoding worldsA worldsProd worldsC 
            {
              ArrayList<World> RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<World> ws = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = ws;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("main",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("encoding",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-10)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // worldsProd ::= worldsProd worldProd 
            {
              ArrayList<World> RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<World> array = (ArrayList<World>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int worldleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int worldright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		World world = (World)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		array.add(world);
                                                                    System.out.println(world);
                                                                    RESULT = array;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsProd",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // worldsProd ::= worldProd 
            {
              ArrayList<World> RESULT =null;
		int worldleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int worldright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		World world = (World)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = new ArrayList<World>();
                                                                    System.out.println(world);
                                                                    RESULT.add(world);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsProd",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // worldProd ::= worldA attributes worldC 
            {
              World RESULT =null;
		RESULT = worldBuilder.build();
                                                                    worldBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldProd",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // attributes ::= attributes attribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // attributes ::= attribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // attribute ::= nameA PALABRA nameC 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		worldBuilder.withName(nombre.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // attribute ::= rowsA ENTERO rowsC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		worldBuilder.withRows(Double.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // attribute ::= colsA ENTERO colsC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		worldBuilder.withCols(Double.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // attribute ::= configA configProd configC 
            {
              Object RESULT =null;
		worldBuilder.withConfig(configBuilder.build());
                                                                    configBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // attribute ::= boardA boardProd boardC 
            {
              Object RESULT =null;
		worldBuilder.withBoard(boardBuilder.withPoint(pointBuilder.build()).build());
                                                                    pointBuilder.clean();
                                                                    boardBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // attribute ::= boxesA pointProd boxesC 
            {
              Object RESULT =null;
		worldBuilder.withBox(pointBuilder.build());
                                                                    pointBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // attribute ::= targetsA pointProd targetsC 
            {
              Object RESULT =null;
		worldBuilder.withTarget(pointBuilder.build());
                                                                    pointBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attribute ::= playerA pointProd playerC 
            {
              Object RESULT =null;
		worldBuilder.withPlayer(pointBuilder.build());
                                                                    pointBuilder.clean();
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attribute",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // configProd ::= configProd configAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // configProd ::= configAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // configAttribute ::= boxColorA HEXADECIMAL boxColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withBoxColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // configAttribute ::= boxOnTargetColorA HEXADECIMAL boxOnTargetColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withBoxOnTargetColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // configAttribute ::= targetColorA HEXADECIMAL targetColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withTargetColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // configAttribute ::= brickColorA HEXADECIMAL brickColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withBrickColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // configAttribute ::= hallColorA HEXADECIMAL hallColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withHallColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // configAttribute ::= undefinedColorA HEXADECIMAL undefinedColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withUndefinedColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // configAttribute ::= playerColorA HEXADECIMAL playerColorC 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		configBuilder.withPlayerColor(h.getValue());
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAttribute",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boardProd ::= boardProd boardAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boardProd ::= boardAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boardAttribute ::= posxA ENTERO posxC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		pointBuilder.withPosX(Double.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAttribute",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$0 ::= 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
pointBuilder.withPosY(Double.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boardAttribute ::= posyA ENTERO posyC NT$0 typeA typeAttribute typeC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		boardBuilder.withType(type);
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAttribute",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typeAttribute ::= BRICK 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = XMLParserSym.terminalNames[type.getType()];
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeAttribute",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typeAttribute ::= HALL 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Token type = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		RESULT = XMLParserSym.terminalNames[type.getType()];
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeAttribute",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pointProd ::= pointProd pointAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pointProd ::= pointAttribute 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pointAttribute ::= posxA ENTERO posxC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		pointBuilder.withPosX(Double.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointAttribute",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pointAttribute ::= posyA ENTERO posyC 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		pointBuilder.withPosY(Double.valueOf(entero.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointAttribute",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // worldsA ::= MENOR_QUE WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsA",28, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsC",27, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // worldA ::= MENOR_QUE WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldA",29, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldC",30, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nameA ::= MENOR_QUE NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameA",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameC",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rowsA ::= MENOR_QUE ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsA",13, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsC",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // colsA ::= MENOR_QUE COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsA",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsC",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // configA ::= MENOR_QUE CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configA",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configC",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorA",33, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorC",34, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorA",35, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorC",36, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorA",37, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorC",38, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorA",39, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorC",40, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorA",41, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorC",42, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorA",43, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // undefinedColorC ::= MENOR_QUE DIAGONAL UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorC",44, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorA",45, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorC",52, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // boardA ::= MENOR_QUE BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardA",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardC",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // posxA ::= MENOR_QUE POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxA",46, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxC",47, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // posyA ::= MENOR_QUE POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyA",48, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyC",49, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // typeA ::= MENOR_QUE TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeA",50, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeC",51, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boxesA ::= MENOR_QUE BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesA",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesC",22, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // targetsA ::= MENOR_QUE TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsA",23, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsC",24, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // playerA ::= MENOR_QUE PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerA",25, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerC",26, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$XMLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}
