
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.server.compiler.parser;

import com.mio.server.builders.*;
import com.mio.server.compiler.Token;
import com.mio.server.compiler.lexer.XMLLexer;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return XMLParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\122\000\002\002\004\000\002\002\006\000\002\003" +
    "\015\000\002\005\004\000\002\005\003\000\002\010\005" +
    "\000\002\012\004\000\002\012\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\023\004\000\002\023\003\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\026\004\000\002\026\003\000\002\061\003\000\002\061" +
    "\005\000\002\070\003\000\002\070\003\000\002\032\004" +
    "\000\002\032\003\000\002\071\003\000\002\035\004\000" +
    "\002\035\003\000\002\072\003\000\002\040\004\000\002" +
    "\040\003\000\002\073\003\000\002\030\005\000\002\030" +
    "\005\000\002\004\005\000\002\006\006\000\002\007\005" +
    "\000\002\011\006\000\002\014\005\000\002\015\006\000" +
    "\002\016\005\000\002\017\006\000\002\020\005\000\002" +
    "\021\006\000\002\022\005\000\002\024\006\000\002\043" +
    "\005\000\002\044\006\000\002\045\005\000\002\046\006" +
    "\000\002\047\005\000\002\050\006\000\002\051\005\000" +
    "\002\052\006\000\002\053\005\000\002\054\006\000\002" +
    "\055\005\000\002\056\005\000\002\057\005\000\002\060" +
    "\006\000\002\025\005\000\002\027\006\000\002\062\005" +
    "\000\002\063\006\000\002\064\005\000\002\065\006\000" +
    "\002\066\005\000\002\067\006\000\002\031\005\000\002" +
    "\033\006\000\002\034\005\000\002\036\006\000\002\037" +
    "\005\000\002\041\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\021\005\001\002\000\004\002\336\001" +
    "\002\000\004\032\324\001\002\000\004\021\007\001\002" +
    "\000\004\015\322\001\002\000\004\021\011\001\002\000" +
    "\004\014\316\001\002\000\004\021\312\001\002\000\004" +
    "\021\ufffd\001\002\000\004\021\023\001\002\000\004\044" +
    "\304\001\002\000\004\021\ufffa\001\002\000\004\044\276" +
    "\001\002\000\004\021\174\001\002\000\004\021\241\001" +
    "\002\000\004\021\174\001\002\000\022\004\043\005\040" +
    "\006\036\007\037\010\041\011\042\012\033\013\034\001" +
    "\002\000\004\021\174\001\002\000\004\021\072\001\002" +
    "\000\004\045\056\001\002\000\004\021\031\001\002\000" +
    "\004\021\ufffb\001\002\000\024\004\043\005\040\006\036" +
    "\007\037\010\041\011\042\012\033\013\034\040\035\001" +
    "\002\000\004\021\ufffc\001\002\000\004\022\055\001\002" +
    "\000\004\022\054\001\002\000\004\014\052\001\002\000" +
    "\004\022\051\001\002\000\004\022\050\001\002\000\004" +
    "\022\047\001\002\000\004\022\046\001\002\000\004\022" +
    "\045\001\002\000\004\022\044\001\002\000\004\045\uffd3" +
    "\001\002\000\004\021\uffb3\001\002\000\004\021\uffcd\001" +
    "\002\000\004\044\uffd1\001\002\000\004\021\uffb1\001\002" +
    "\000\004\044\uffcf\001\002\000\004\022\053\001\002\000" +
    "\004\021\uffd4\001\002\000\004\021\uffbd\001\002\000\004" +
    "\021\uffb5\001\002\000\004\021\060\001\002\000\004\021" +
    "\ufff9\001\002\000\004\040\061\001\002\000\004\004\062" +
    "\001\002\000\004\022\063\001\002\000\004\021\uffd2\001" +
    "\002\000\004\041\165\001\002\000\004\041\157\001\002" +
    "\000\004\041\152\001\002\000\004\041\144\001\002\000" +
    "\004\041\136\001\002\000\004\021\130\001\002\000\020" +
    "\023\114\024\120\025\116\026\117\027\113\030\112\031" +
    "\115\001\002\000\004\021\ufff0\001\002\000\004\041\104" +
    "\001\002\000\004\041\076\001\002\000\004\021\077\001" +
    "\002\000\004\040\101\001\002\000\004\021\uffef\001\002" +
    "\000\004\023\102\001\002\000\004\022\103\001\002\000" +
    "\004\021\uffca\001\002\000\004\021\105\001\002\000\004" +
    "\040\107\001\002\000\004\021\uffed\001\002\000\004\025" +
    "\110\001\002\000\004\022\111\001\002\000\004\021\uffc6" +
    "\001\002\000\004\022\127\001\002\000\004\022\126\001" +
    "\002\000\004\022\125\001\002\000\004\022\124\001\002" +
    "\000\004\022\123\001\002\000\004\022\122\001\002\000" +
    "\004\022\121\001\002\000\004\041\uffc9\001\002\000\004" +
    "\041\uffc1\001\002\000\004\041\uffc7\001\002\000\004\041" +
    "\uffbf\001\002\000\004\041\uffcb\001\002\000\004\041\uffc5" +
    "\001\002\000\004\041\uffc3\001\002\000\022\023\114\024" +
    "\120\025\116\026\117\027\113\030\112\031\115\040\133" +
    "\001\002\000\004\021\ufff1\001\002\000\004\021\ufff6\001" +
    "\002\000\004\010\134\001\002\000\004\022\135\001\002" +
    "\000\004\021\uffcc\001\002\000\004\021\137\001\002\000" +
    "\004\040\141\001\002\000\004\021\uffee\001\002\000\004" +
    "\024\142\001\002\000\004\022\143\001\002\000\004\021" +
    "\uffc8\001\002\000\004\021\146\001\002\000\004\021\uffeb" +
    "\001\002\000\004\040\147\001\002\000\004\030\150\001" +
    "\002\000\004\022\151\001\002\000\004\021\uffc2\001\002" +
    "\000\004\021\153\001\002\000\004\026\155\001\002\000" +
    "\004\021\uffea\001\002\000\004\022\156\001\002\000\004" +
    "\021\uffc0\001\002\000\004\021\160\001\002\000\004\040" +
    "\162\001\002\000\004\021\uffec\001\002\000\004\027\163" +
    "\001\002\000\004\022\164\001\002\000\004\021\uffc4\001" +
    "\002\000\004\021\166\001\002\000\004\040\170\001\002" +
    "\000\004\021\uffe9\001\002\000\004\031\171\001\002\000" +
    "\004\022\172\001\002\000\004\021\uffbe\001\002\000\004" +
    "\044\221\001\002\000\006\017\214\020\213\001\002\000" +
    "\004\021\uffdd\001\002\000\004\021\uffde\001\002\000\004" +
    "\021\207\001\002\000\004\044\201\001\002\000\004\021" +
    "\202\001\002\000\004\040\204\001\002\000\004\021\uffd9" +
    "\001\002\000\004\017\205\001\002\000\004\022\206\001" +
    "\002\000\004\021\uffba\001\002\000\010\017\214\020\213" +
    "\040\212\001\002\000\004\021\uffdf\001\002\000\004\021" +
    "\ufff3\001\002\000\004\011\217\001\002\000\004\022\216" +
    "\001\002\000\004\022\215\001\002\000\004\044\uffbb\001" +
    "\002\000\004\044\uffb9\001\002\000\004\022\220\001\002" +
    "\000\004\021\uffb2\001\002\000\004\021\222\001\002\000" +
    "\004\040\224\001\002\000\004\021\uffd8\001\002\000\004" +
    "\020\225\001\002\000\004\022\226\001\002\000\004\021" +
    "\uffb8\001\002\000\004\021\232\001\002\000\004\021\uffda" +
    "\001\002\000\004\021\uffdb\001\002\000\010\017\214\020" +
    "\213\040\235\001\002\000\004\021\ufff2\001\002\000\004" +
    "\021\uffdc\001\002\000\004\007\236\001\002\000\004\022" +
    "\237\001\002\000\004\021\uffb0\001\002\000\004\021\257" +
    "\001\002\000\010\016\255\017\214\020\213\001\002\000" +
    "\004\021\uffe7\001\002\000\004\021\uffe6\001\002\000\006" +
    "\042\246\043\245\001\002\000\004\021\uffe4\001\002\000" +
    "\004\021\uffe3\001\002\000\004\021\250\001\002\000\004" +
    "\040\252\001\002\000\004\021\uffe5\001\002\000\004\016" +
    "\253\001\002\000\004\022\254\001\002\000\004\021\uffb6" +
    "\001\002\000\004\022\256\001\002\000\006\042\uffb7\043" +
    "\uffb7\001\002\000\012\016\255\017\214\020\213\040\262" +
    "\001\002\000\004\021\uffe8\001\002\000\004\021\ufff5\001" +
    "\002\000\004\013\263\001\002\000\004\022\264\001\002" +
    "\000\004\021\uffbc\001\002\000\004\021\uffe0\001\002\000" +
    "\004\021\271\001\002\000\004\021\uffe1\001\002\000\004" +
    "\021\ufff4\001\002\000\010\017\214\020\213\040\273\001" +
    "\002\000\004\021\uffe2\001\002\000\004\012\274\001\002" +
    "\000\004\022\275\001\002\000\004\021\uffb4\001\002\000" +
    "\004\021\277\001\002\000\004\040\301\001\002\000\004" +
    "\021\ufff8\001\002\000\004\005\302\001\002\000\004\022" +
    "\303\001\002\000\004\021\uffd0\001\002\000\004\021\306" +
    "\001\002\000\004\021\ufff7\001\002\000\004\040\307\001" +
    "\002\000\004\006\310\001\002\000\004\022\311\001\002" +
    "\000\004\021\uffce\001\002\000\006\014\316\040\315\001" +
    "\002\000\004\021\ufffe\001\002\000\004\002\000\001\002" +
    "\000\004\015\320\001\002\000\004\022\317\001\002\000" +
    "\004\021\uffd5\001\002\000\004\022\321\001\002\000\004" +
    "\002\uffd6\001\002\000\004\022\323\001\002\000\004\021" +
    "\uffd7\001\002\000\004\033\325\001\002\000\004\034\326" +
    "\001\002\000\004\035\327\001\002\000\004\036\330\001" +
    "\002\000\004\037\331\001\002\000\004\035\332\001\002" +
    "\000\004\036\333\001\002\000\004\032\334\001\002\000" +
    "\004\022\335\001\002\000\004\021\uffff\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\010\005\011\007\013\010\012\001\001\000" +
    "\002\001\001\000\010\006\313\007\013\010\312\001\001" +
    "\000\002\001\001\000\026\012\026\013\015\014\025\016" +
    "\016\020\014\022\024\025\020\031\017\034\023\037\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\264\032\265\062\177\064\172\071\266" +
    "\001\001\000\016\026\237\030\242\061\241\062\177\064" +
    "\172\066\243\001\001\000\014\030\227\040\226\062\177" +
    "\064\172\073\230\001\001\000\002\001\001\000\014\030" +
    "\174\035\176\062\177\064\172\072\175\001\001\000\024" +
    "\023\070\042\072\043\074\045\067\047\073\051\064\053" +
    "\066\055\065\057\063\001\001\000\002\001\001\000\026" +
    "\011\031\013\027\014\025\016\016\020\014\022\024\025" +
    "\020\031\017\034\023\037\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\024\131\042\130\043\074\045\067\047\073\051" +
    "\064\053\066\055\065\057\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\174\036\210\062\177\064\172\072\207\001" +
    "\001\000\002\001\001\000\004\063\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\030\227\041\232\062" +
    "\177\064\172\073\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\027\260\030\242\061\257\062\177\064\172\066" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\250\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\264\033\267\062\177\064\172\071\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private WorldBuilder builder;
    private WConfigBuilder configBuilder;
    public XMLParser(XMLLexer lexer){
        super(lexer);
        this.builder = new WorldBuilder();
        this.configBuilder = new WConfigBuilder();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
      switch (CUP$XMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = start_val;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XMLParser$parser.done_parsing();
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= encoding worldsA worldsProd worldsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("encoding",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-10)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // worldsProd ::= worldsProd worldProd 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsProd",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // worldsProd ::= worldProd 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsProd",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // worldProd ::= worldA atributos worldC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldProd",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atributos ::= atributos atributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atributos ::= atributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atributo ::= nameA PALABRA nameC 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = builder.withName(String.valueOf(name.getValue()));
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atributo ::= rowsA ENTERO rowsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributo ::= colsA ENTERO colsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributo ::= configA configProd configC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributo ::= boardA boardProd boardC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributo ::= boxesA boxesProd boxesC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atributo ::= targetsA targetsProd targetsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atributo ::= playerA playerProd playerC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // configProd ::= configProd configAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // configProd ::= configAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // configAtributo ::= boxColorA HEXADECIMAL boxColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // configAtributo ::= boxOnTargetColorA HEXADECIMAL boxOnTargetColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // configAtributo ::= targetColorA HEXADECIMAL targetColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // configAtributo ::= brickColorA HEXADECIMAL brickColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // configAtributo ::= hallColorA HEXADECIMAL hallColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // configAtributo ::= undefinedColorA HEXADECIMAL undefinedColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // configAtributo ::= playerColorA HEXADECIMAL playerColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boardProd ::= boardProd boardAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boardProd ::= boardAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boardAtributo ::= pointProd 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAtributo",47, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boardAtributo ::= typeA typeProd typeC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAtributo",47, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typeProd ::= BRICK 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeProd",54, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typeProd ::= HALL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeProd",54, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // boxesProd ::= boxesProd boxesAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesProd",24, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boxesProd ::= boxesAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesProd",24, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boxesAtributo ::= pointProd 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesAtributo",55, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // targetsProd ::= targetsProd targetsAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsProd",27, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // targetsProd ::= targetsAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsProd",27, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // targetsAtributo ::= pointProd 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsAtributo",56, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // playerProd ::= playerProd playerAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerProd",30, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // playerProd ::= playerAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerProd",30, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // playerAtributo ::= pointProd 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerAtributo",57, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pointProd ::= posxA ENTERO posxC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd",22, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pointProd ::= posyA ENTERO posyC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("pointProd",22, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // worldsA ::= MENOR_QUE WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsA",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsC",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // worldA ::= MENOR_QUE WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldA",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldC",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nameA ::= MENOR_QUE NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameA",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameC",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rowsA ::= MENOR_QUE ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsA",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsC",13, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // colsA ::= MENOR_QUE COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsA",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsC",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // configA ::= MENOR_QUE CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configA",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configC",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorA",33, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorC",34, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorA",35, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorC",36, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorA",37, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorC",38, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorA",39, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorC",40, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorA",41, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorC",42, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorA",43, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // undefinedColorC ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorC",44, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorA",45, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorC",46, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boardA ::= MENOR_QUE BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardA",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardC",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // posxA ::= MENOR_QUE POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxA",48, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxC",49, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // posyA ::= MENOR_QUE POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyA",50, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyC",51, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // typeA ::= MENOR_QUE TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeA",52, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeC",53, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boxesA ::= MENOR_QUE BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesA",23, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesC",25, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // targetsA ::= MENOR_QUE TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsA",26, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsC",28, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // playerA ::= MENOR_QUE PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerA",29, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerC",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$XMLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}
