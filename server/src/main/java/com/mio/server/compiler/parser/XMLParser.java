
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.server.compiler.parser;

import com.mio.server.compiler.lexer.XMLLexer;
import java_cup.runtime.Scanner;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return XMLParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\006\000\002\003" +
    "\015\000\002\005\004\000\002\005\003\000\002\010\005" +
    "\000\002\012\004\000\002\012\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\023\004\000\002\023\003\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\005\000\002" +
    "\026\004\000\002\026\003\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\067\003\000\002\067\003" +
    "\000\002\031\004\000\002\031\003\000\002\070\005\000" +
    "\002\070\005\000\002\034\004\000\002\034\003\000\002" +
    "\071\005\000\002\071\005\000\002\037\004\000\002\037" +
    "\003\000\002\072\005\000\002\072\005\000\002\004\005" +
    "\000\002\006\006\000\002\007\005\000\002\011\006\000" +
    "\002\014\005\000\002\015\006\000\002\016\005\000\002" +
    "\017\006\000\002\020\005\000\002\021\006\000\002\022" +
    "\005\000\002\024\006\000\002\042\005\000\002\043\006" +
    "\000\002\044\005\000\002\045\006\000\002\046\005\000" +
    "\002\047\006\000\002\050\005\000\002\051\006\000\002" +
    "\052\005\000\002\053\006\000\002\054\005\000\002\055" +
    "\005\000\002\056\005\000\002\057\006\000\002\025\005" +
    "\000\002\027\006\000\002\061\005\000\002\062\006\000" +
    "\002\063\005\000\002\064\006\000\002\065\005\000\002" +
    "\066\006\000\002\030\005\000\002\032\006\000\002\033" +
    "\005\000\002\035\006\000\002\036\005\000\002\040\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\004\021\005\001\002\000\004\002\354\001" +
    "\002\000\004\032\342\001\002\000\004\021\007\001\002" +
    "\000\004\015\340\001\002\000\004\021\012\001\002\000" +
    "\004\021\332\001\002\000\004\014\330\001\002\000\004" +
    "\021\ufffd\001\002\000\004\021\023\001\002\000\004\044" +
    "\322\001\002\000\004\021\ufffa\001\002\000\004\044\314" +
    "\001\002\000\004\021\174\001\002\000\004\021\246\001" +
    "\002\000\004\021\174\001\002\000\022\004\043\005\040" +
    "\006\036\007\037\010\041\011\042\012\033\013\034\001" +
    "\002\000\004\021\174\001\002\000\004\021\072\001\002" +
    "\000\004\045\056\001\002\000\004\021\031\001\002\000" +
    "\004\021\ufffb\001\002\000\024\004\043\005\040\006\036" +
    "\007\037\010\041\011\042\012\033\013\034\040\035\001" +
    "\002\000\004\021\ufffc\001\002\000\004\022\055\001\002" +
    "\000\004\022\054\001\002\000\004\014\052\001\002\000" +
    "\004\022\051\001\002\000\004\022\050\001\002\000\004" +
    "\022\047\001\002\000\004\022\046\001\002\000\004\022" +
    "\045\001\002\000\004\022\044\001\002\000\004\045\uffd1" +
    "\001\002\000\004\021\uffb1\001\002\000\004\021\uffcb\001" +
    "\002\000\004\044\uffcf\001\002\000\004\021\uffaf\001\002" +
    "\000\004\044\uffcd\001\002\000\004\022\053\001\002\000" +
    "\004\021\uffd2\001\002\000\004\021\uffbb\001\002\000\004" +
    "\021\uffb3\001\002\000\004\021\060\001\002\000\004\021" +
    "\ufff9\001\002\000\004\040\061\001\002\000\004\004\062" +
    "\001\002\000\004\022\063\001\002\000\004\021\uffd0\001" +
    "\002\000\004\041\165\001\002\000\004\041\157\001\002" +
    "\000\004\041\152\001\002\000\004\041\144\001\002\000" +
    "\004\041\136\001\002\000\004\021\130\001\002\000\020" +
    "\023\114\024\120\025\116\026\117\027\113\030\112\031" +
    "\115\001\002\000\004\021\ufff0\001\002\000\004\041\104" +
    "\001\002\000\004\041\076\001\002\000\004\021\100\001" +
    "\002\000\004\021\uffef\001\002\000\004\040\101\001\002" +
    "\000\004\023\102\001\002\000\004\022\103\001\002\000" +
    "\004\021\uffc8\001\002\000\004\021\105\001\002\000\004" +
    "\040\107\001\002\000\004\021\uffed\001\002\000\004\025" +
    "\110\001\002\000\004\022\111\001\002\000\004\021\uffc4" +
    "\001\002\000\004\022\127\001\002\000\004\022\126\001" +
    "\002\000\004\022\125\001\002\000\004\022\124\001\002" +
    "\000\004\022\123\001\002\000\004\022\122\001\002\000" +
    "\004\022\121\001\002\000\004\041\uffc7\001\002\000\004" +
    "\041\uffbf\001\002\000\004\041\uffc5\001\002\000\004\041" +
    "\uffbd\001\002\000\004\041\uffc9\001\002\000\004\041\uffc3" +
    "\001\002\000\004\041\uffc1\001\002\000\022\023\114\024" +
    "\120\025\116\026\117\027\113\030\112\031\115\040\133" +
    "\001\002\000\004\021\ufff1\001\002\000\004\021\ufff6\001" +
    "\002\000\004\010\134\001\002\000\004\022\135\001\002" +
    "\000\004\021\uffca\001\002\000\004\021\137\001\002\000" +
    "\004\040\141\001\002\000\004\021\uffee\001\002\000\004" +
    "\024\142\001\002\000\004\022\143\001\002\000\004\021" +
    "\uffc6\001\002\000\004\021\146\001\002\000\004\021\uffeb" +
    "\001\002\000\004\040\147\001\002\000\004\030\150\001" +
    "\002\000\004\022\151\001\002\000\004\021\uffc0\001\002" +
    "\000\004\021\153\001\002\000\004\026\155\001\002\000" +
    "\004\021\uffea\001\002\000\004\022\156\001\002\000\004" +
    "\021\uffbe\001\002\000\004\021\160\001\002\000\004\040" +
    "\162\001\002\000\004\021\uffec\001\002\000\004\027\163" +
    "\001\002\000\004\022\164\001\002\000\004\021\uffc2\001" +
    "\002\000\004\021\166\001\002\000\004\040\170\001\002" +
    "\000\004\021\uffe9\001\002\000\004\031\171\001\002\000" +
    "\004\022\172\001\002\000\004\021\uffbc\001\002\000\004" +
    "\044\220\001\002\000\006\017\213\020\212\001\002\000" +
    "\004\021\uffdc\001\002\000\004\021\206\001\002\000\004" +
    "\044\200\001\002\000\004\021\201\001\002\000\004\040" +
    "\203\001\002\000\004\021\uffdb\001\002\000\004\017\204" +
    "\001\002\000\004\022\205\001\002\000\004\021\uffb8\001" +
    "\002\000\010\017\213\020\212\040\211\001\002\000\004" +
    "\021\uffdd\001\002\000\004\021\ufff3\001\002\000\004\011" +
    "\216\001\002\000\004\022\215\001\002\000\004\022\214" +
    "\001\002\000\004\044\uffb9\001\002\000\004\044\uffb7\001" +
    "\002\000\004\022\217\001\002\000\004\021\uffb0\001\002" +
    "\000\004\021\221\001\002\000\004\040\223\001\002\000" +
    "\004\021\uffda\001\002\000\004\020\224\001\002\000\004" +
    "\022\225\001\002\000\004\021\uffb6\001\002\000\004\044" +
    "\242\001\002\000\004\021\234\001\002\000\004\044\232" +
    "\001\002\000\004\021\uffd8\001\002\000\004\021\201\001" +
    "\002\000\004\021\uffd7\001\002\000\010\017\213\020\212" +
    "\040\237\001\002\000\004\021\ufff2\001\002\000\004\021" +
    "\uffd9\001\002\000\004\007\240\001\002\000\004\022\241" +
    "\001\002\000\004\021\uffae\001\002\000\004\021\221\001" +
    "\002\000\004\021\uffd6\001\002\000\004\044\274\001\002" +
    "\000\004\021\266\001\002\000\010\016\264\017\213\020" +
    "\212\001\002\000\004\021\uffe7\001\002\000\004\044\262" +
    "\001\002\000\006\042\253\043\252\001\002\000\004\021" +
    "\uffe3\001\002\000\004\021\uffe2\001\002\000\004\021\255" +
    "\001\002\000\004\040\257\001\002\000\004\021\uffe4\001" +
    "\002\000\004\016\260\001\002\000\004\022\261\001\002" +
    "\000\004\021\uffb4\001\002\000\004\021\201\001\002\000" +
    "\004\021\uffe6\001\002\000\004\022\265\001\002\000\006" +
    "\042\uffb5\043\uffb5\001\002\000\012\016\264\017\213\020" +
    "\212\040\271\001\002\000\004\021\uffe8\001\002\000\004" +
    "\021\ufff5\001\002\000\004\013\272\001\002\000\004\022" +
    "\273\001\002\000\004\021\uffba\001\002\000\004\021\221" +
    "\001\002\000\004\021\uffe5\001\002\000\004\044\312\001" +
    "\002\000\004\021\305\001\002\000\004\021\uffe0\001\002" +
    "\000\004\044\302\001\002\000\004\021\201\001\002\000" +
    "\004\021\uffdf\001\002\000\004\021\ufff4\001\002\000\010" +
    "\017\213\020\212\040\307\001\002\000\004\021\uffe1\001" +
    "\002\000\004\012\310\001\002\000\004\022\311\001\002" +
    "\000\004\021\uffb2\001\002\000\004\021\221\001\002\000" +
    "\004\021\uffde\001\002\000\004\021\315\001\002\000\004" +
    "\040\317\001\002\000\004\021\ufff8\001\002\000\004\005" +
    "\320\001\002\000\004\022\321\001\002\000\004\021\uffce" +
    "\001\002\000\004\021\324\001\002\000\004\021\ufff7\001" +
    "\002\000\004\040\325\001\002\000\004\006\326\001\002" +
    "\000\004\022\327\001\002\000\004\021\uffcc\001\002\000" +
    "\004\022\331\001\002\000\004\021\uffd3\001\002\000\006" +
    "\014\330\040\335\001\002\000\004\021\ufffe\001\002\000" +
    "\004\002\000\001\002\000\004\015\336\001\002\000\004" +
    "\022\337\001\002\000\004\002\uffd4\001\002\000\004\022" +
    "\341\001\002\000\004\021\uffd5\001\002\000\004\033\343" +
    "\001\002\000\004\034\344\001\002\000\004\035\345\001" +
    "\002\000\004\036\346\001\002\000\004\037\347\001\002" +
    "\000\004\035\350\001\002\000\004\036\351\001\002\000" +
    "\004\032\352\001\002\000\004\022\353\001\002\000\004" +
    "\021\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\352\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\010\005\010\007\013\010\012\001\001\000" +
    "\010\006\333\007\013\010\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\012\026\013\015\014\025\016" +
    "\016\020\014\022\024\025\020\030\017\033\023\036\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\031\276\061\300\063\275\070\277\001\001" +
    "\000\014\026\244\060\246\061\247\063\243\065\250\001" +
    "\001\000\012\037\226\061\227\063\225\072\230\001\001" +
    "\000\002\001\001\000\012\034\175\061\176\063\172\071" +
    "\174\001\001\000\024\023\070\041\072\042\074\044\067" +
    "\046\073\050\064\052\066\054\065\056\063\001\001\000" +
    "\002\001\001\000\026\011\031\013\027\014\025\016\016" +
    "\020\014\022\024\025\020\030\017\033\023\036\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\024\131\041\130\042\074" +
    "\044\067\046\073\050\064\052\066\054\065\056\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\035\207\061\176\063\172\071\206\001\001" +
    "\000\002\001\001\000\004\062\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\040\234" +
    "\061\227\063\225\072\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\027\267\060\266\061\247\063\243\065\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\067\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\032\303\061\300\063\275\070" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\064\312\001\001\000" +
    "\002\001\001\000\004\017\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public XMLParser(XMLLexer lexer){
        super(lexer);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
      switch (CUP$XMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = start_val;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XMLParser$parser.done_parsing();
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= encoding worldsA worlds worldsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("main",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("encoding",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-10)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // worlds ::= worlds world 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worlds",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // worlds ::= world 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worlds",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // world ::= worldA atributos worldC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("world",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atributos ::= atributos atributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atributos ::= atributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributos",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atributo ::= nameA PALABRA nameC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // atributo ::= rowsA ENTERO rowsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // atributo ::= colsA ENTERO colsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // atributo ::= configA configProd configC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // atributo ::= boardA boardProd boardC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atributo ::= boxesA boxesProd boxesC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atributo ::= targetsA targetsProd targetsC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atributo ::= playerA playerProd playerC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // configProd ::= configProd configAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // configProd ::= configAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configProd",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // configAtributo ::= boxColorA HEXADECIMAL boxColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // configAtributo ::= boxOnTargetColorA HEXADECIMAL boxOnTargetColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // configAtributo ::= targetColorA HEXADECIMAL targetColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // configAtributo ::= brickColorA HEXADECIMAL brickColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // configAtributo ::= hallColorA HEXADECIMAL hallColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // configAtributo ::= undefinedColorA HEXADECIMAL undefinedColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // configAtributo ::= playerColorA HEXADECIMAL playerColorC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configAtributo",31, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boardProd ::= boardProd boardAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boardProd ::= boardAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardProd",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boardAtributo ::= posxA ENTERO posxC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAtributo",46, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // boardAtributo ::= posyA ENTERO posyC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAtributo",46, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // boardAtributo ::= typeA typeProd typeC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardAtributo",46, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typeProd ::= BRICK 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeProd",53, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // typeProd ::= HALL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeProd",53, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // boxesProd ::= boxesProd boxesAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesProd",23, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // boxesProd ::= boxesAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesProd",23, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // boxesAtributo ::= posxA ENTERO posxC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesAtributo",54, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boxesAtributo ::= posyA ENTERO posyC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesAtributo",54, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // targetsProd ::= targetsProd targetsAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsProd",26, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // targetsProd ::= targetsAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsProd",26, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // targetsAtributo ::= posxA ENTERO posxC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsAtributo",55, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // targetsAtributo ::= posyA ENTERO posyC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsAtributo",55, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // playerProd ::= playerProd playerAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerProd",29, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // playerProd ::= playerAtributo 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerProd",29, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // playerAtributo ::= posxA ENTERO posxC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerAtributo",56, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // playerAtributo ::= posyA ENTERO posyC 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerAtributo",56, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // worldsA ::= MENOR_QUE WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsA",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldsC",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // worldA ::= MENOR_QUE WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldA",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("worldC",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nameA ::= MENOR_QUE NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameA",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("nameC",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rowsA ::= MENOR_QUE ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsA",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("rowsC",13, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // colsA ::= MENOR_QUE COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsA",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("colsC",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // configA ::= MENOR_QUE CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configA",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("configC",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorA",32, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxColorC",33, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorA",34, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxOnTargetColorC",35, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorA",36, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetColorC",37, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorA",38, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("brickColorC",39, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorA",40, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("hallColorC",41, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorA",42, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // undefinedColorC ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("undefinedColorC",43, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorA",44, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerColorC",45, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boardA ::= MENOR_QUE BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardA",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boardC",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // posxA ::= MENOR_QUE POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxA",47, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posxC",48, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // posyA ::= MENOR_QUE POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyA",49, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("posyC",50, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // typeA ::= MENOR_QUE TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeA",51, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("typeC",52, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // boxesA ::= MENOR_QUE BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesA",22, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("boxesC",24, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // targetsA ::= MENOR_QUE TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsA",25, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("targetsC",27, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // playerA ::= MENOR_QUE PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerA",28, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("playerC",30, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$XMLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}
