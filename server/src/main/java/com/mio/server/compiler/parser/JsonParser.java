
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.server.compiler.parser;

import com.mio.server.compiler.Token;
import com.mio.server.builders.*;
import com.mio.server.compiler.lexer.JsonLexer;
import com.mio.server.models.Board;
import com.mio.server.models.Point;
import com.mio.server.models.Request;
import java.util.ArrayList;
import static com.mio.server.compiler.parser.JsonParserSym.*;
import static com.mio.server.models.RequestType.*;


/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JsonParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JsonParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public JsonParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JsonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JsonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\022\005\000\002\021" +
    "\011\000\002\021\011\000\002\021\003\000\002\002\005" +
    "\000\002\002\003\000\002\003\011\000\002\003\007\000" +
    "\002\003\007\000\002\003\011\000\002\003\011\000\002" +
    "\003\011\000\002\003\011\000\002\003\011\000\002\020" +
    "\007\000\002\020\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\007\000\002\017\007\000\002\017\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\007\000\002" +
    "\024\011\000\002\016\003\000\002\016\003\000\002\015" +
    "\003\000\002\015\003\000\002\004\005\000\002\004\003" +
    "\000\002\005\011\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\012\003\000\002\012" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\003" +
    "\000\002\007\005\000\002\007\005\000\002\007\004\000" +
    "\002\007\003\000\002\010\005\000\002\010\003\000\002" +
    "\011\006\000\002\011\003\000\002\011\003\000\002\013" +
    "\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\032\005\001\002\000\004\002\233\001" +
    "\002\000\004\022\010\001\002\000\006\033\ufffb\040\ufffb" +
    "\001\002\000\004\033\232\001\002\000\026\004\024\005" +
    "\016\006\017\007\020\010\015\011\023\012\021\013\022" +
    "\014\217\015\216\001\002\000\006\033\ufffd\040\012\001" +
    "\002\000\004\022\014\001\002\000\006\033\ufffc\040\ufffc" +
    "\001\002\000\022\004\024\005\016\006\017\007\020\010" +
    "\015\011\023\012\021\013\022\001\002\000\004\022\170" +
    "\001\002\000\004\022\165\001\002\000\004\022\162\001" +
    "\002\000\004\022\155\001\002\000\004\022\150\001\002" +
    "\000\004\022\114\001\002\000\004\022\032\001\002\000" +
    "\004\022\025\001\002\000\004\041\026\001\002\000\004" +
    "\022\027\001\002\000\004\053\030\001\002\000\004\022" +
    "\031\001\002\000\006\033\ufffa\040\ufffa\001\002\000\004" +
    "\041\033\001\002\000\004\036\034\001\002\000\004\032" +
    "\036\001\002\000\006\037\110\040\107\001\002\000\004" +
    "\022\040\001\002\000\006\033\105\040\104\001\002\000" +
    "\006\020\043\021\042\001\002\000\006\033\uffef\040\uffef" +
    "\001\002\000\004\022\uffe4\001\002\000\004\022\uffe5\001" +
    "\002\000\004\022\045\001\002\000\004\041\046\001\002" +
    "\000\006\022\050\051\051\001\002\000\006\033\uffee\040" +
    "\uffee\001\002\000\016\034\063\043\064\051\055\052\052" +
    "\054\054\055\062\001\002\000\006\033\uffd9\040\uffd9\001" +
    "\002\000\016\022\uffcc\035\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\001\002\000\004\034\101\001\002\000\004\034" +
    "\uffcb\001\002\000\016\022\uffcd\035\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\001\002\000\016\022\uffcf\035\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\001\002\000\016\022\uffd1" +
    "\035\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\001\002\000" +
    "\016\022\uffd5\035\uffd5\042\uffd5\043\uffd5\044\073\045\074" +
    "\001\002\000\010\022\100\042\071\043\067\001\002\000" +
    "\004\034\uffca\001\002\000\016\034\063\043\064\051\055" +
    "\052\052\054\054\055\062\001\002\000\014\034\063\051" +
    "\055\052\052\054\054\055\062\001\002\000\016\022\uffd2" +
    "\035\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\001\002\000" +
    "\010\035\070\042\071\043\067\001\002\000\016\034\063" +
    "\043\064\051\055\052\052\054\054\055\062\001\002\000" +
    "\016\022\uffd0\035\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\001\002\000\016\034\063\043\064\051\055\052\052\054" +
    "\054\055\062\001\002\000\016\022\uffd7\035\uffd7\042\uffd7" +
    "\043\uffd7\044\073\045\074\001\002\000\014\034\063\051" +
    "\055\052\052\054\054\055\062\001\002\000\014\034\063" +
    "\051\055\052\052\054\054\055\062\001\002\000\016\022" +
    "\uffd3\035\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\001\002" +
    "\000\016\022\uffd4\035\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\001\002\000\016\022\uffd6\035\uffd6\042\uffd6\043\uffd6" +
    "\044\073\045\074\001\002\000\006\033\uffd8\040\uffd8\001" +
    "\002\000\016\034\063\043\064\051\055\052\052\054\054" +
    "\055\062\001\002\000\010\035\103\042\071\043\067\001" +
    "\002\000\016\022\uffce\035\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\001\002\000\004\022\040\001\002\000\006\037" +
    "\ufff1\040\ufff1\001\002\000\006\033\ufff0\040\ufff0\001\002" +
    "\000\004\032\111\001\002\000\006\033\ufff4\040\ufff4\001" +
    "\002\000\004\022\040\001\002\000\006\033\113\040\104" +
    "\001\002\000\006\037\ufff2\040\ufff2\001\002\000\004\041" +
    "\115\001\002\000\004\036\116\001\002\000\004\032\120" +
    "\001\002\000\006\037\144\040\143\001\002\000\004\022" +
    "\123\001\002\000\006\033\141\040\140\001\002\000\006" +
    "\033\uffea\040\uffea\001\002\000\010\017\125\020\043\021" +
    "\042\001\002\000\004\022\135\001\002\000\004\022\126" +
    "\001\002\000\004\041\127\001\002\000\004\022\130\001" +
    "\002\000\006\047\132\050\131\001\002\000\004\022\uffe7" +
    "\001\002\000\004\022\uffe6\001\002\000\004\022\134\001" +
    "\002\000\006\033\uffe8\040\uffe8\001\002\000\004\041\136" +
    "\001\002\000\006\022\050\051\051\001\002\000\006\033" +
    "\uffe9\040\uffe9\001\002\000\004\022\123\001\002\000\006" +
    "\037\uffec\040\uffec\001\002\000\006\033\uffeb\040\uffeb\001" +
    "\002\000\004\032\145\001\002\000\006\033\ufff6\040\ufff6" +
    "\001\002\000\004\022\123\001\002\000\006\033\147\040" +
    "\140\001\002\000\006\037\uffed\040\uffed\001\002\000\004" +
    "\041\151\001\002\000\004\036\152\001\002\000\004\032" +
    "\036\001\002\000\006\037\154\040\107\001\002\000\006" +
    "\033\ufff5\040\ufff5\001\002\000\004\041\156\001\002\000" +
    "\004\032\157\001\002\000\004\022\040\001\002\000\006" +
    "\033\161\040\104\001\002\000\006\033\ufff3\040\ufff3\001" +
    "\002\000\004\041\163\001\002\000\006\022\050\051\051" +
    "\001\002\000\006\033\ufff8\040\ufff8\001\002\000\004\041" +
    "\166\001\002\000\006\022\050\051\051\001\002\000\006" +
    "\033\ufff9\040\ufff9\001\002\000\004\041\171\001\002\000" +
    "\004\032\172\001\002\000\004\022\174\001\002\000\006" +
    "\033\uffe2\040\uffe2\001\002\000\020\023\204\024\210\025" +
    "\206\026\207\027\202\030\201\031\205\001\002\000\006" +
    "\033\177\040\176\001\002\000\004\022\174\001\002\000" +
    "\006\033\ufff7\040\ufff7\001\002\000\006\033\uffe3\040\uffe3" +
    "\001\002\000\004\022\uffdc\001\002\000\004\022\uffdd\001" +
    "\002\000\004\022\211\001\002\000\004\022\uffe0\001\002" +
    "\000\004\022\uffda\001\002\000\004\022\uffde\001\002\000" +
    "\004\022\uffdb\001\002\000\004\022\uffdf\001\002\000\004" +
    "\041\212\001\002\000\004\022\213\001\002\000\004\046" +
    "\214\001\002\000\004\022\215\001\002\000\006\033\uffe1" +
    "\040\uffe1\001\002\000\004\022\225\001\002\000\004\022" +
    "\220\001\002\000\004\041\221\001\002\000\004\022\222" +
    "\001\002\000\004\016\223\001\002\000\004\022\224\001" +
    "\002\000\004\033\uffff\001\002\000\004\041\226\001\002" +
    "\000\004\022\227\001\002\000\004\053\230\001\002\000" +
    "\004\022\231\001\002\000\004\033\ufffe\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\004\022\003\001\001\000\002\001\001\000" +
    "\010\002\010\003\005\021\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\034\001" +
    "\001\000\002\001\001\000\006\025\036\026\040\001\001" +
    "\000\002\001\001\000\004\015\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\046\001\001\000\002\001" +
    "\001\000\014\006\060\007\057\010\056\011\055\013\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\065\007\057\010\056\011\055" +
    "\013\052\001\001\000\010\010\064\011\055\013\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\076" +
    "\010\056\011\055\013\052\001\001\000\002\001\001\000" +
    "\012\007\071\010\056\011\055\013\052\001\001\000\002" +
    "\001\001\000\010\010\075\011\055\013\052\001\001\000" +
    "\010\010\074\011\055\013\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\101\007\057\010\056\011\055\013\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\111\026\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\116\001\001\000\002\001\001\000" +
    "\006\023\120\024\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\136\001\001\000\002\001\001\000\004\024\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\145\024\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\157\026\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\174\005\172\001\001\000\002\001\001\000\004\014" +
    "\202\001\001\000\002\001\001\000\004\005\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JsonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JsonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JsonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    BoardBuilder boardBuilder;
    PointBuilder pointBuilder;
    WConfigBuilder configBuilder;
    WorldBuilder worldBuilder;
    public JsonParser(JsonLexer lexer){

        super(lexer);
        this.boardBuilder = new BoardBuilder();
        this.pointBuilder = new PointBuilder();
        this.configBuilder = new WConfigBuilder();
        this.worldBuilder = new WorldBuilder();

    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JsonParser$actions {
  private final JsonParser parser;

  /** Constructor */
  CUP$JsonParser$actions(JsonParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JsonParser$do_action_part00000000(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack            CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JsonParser$result;

      /* select the action based on the action number */
      switch (CUP$JsonParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= main EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Request start_val = (Request)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		RESULT = start_val;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JsonParser$parser.done_parsing();
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // main ::= LLAVE_A optionProd LLAVE_C 
            {
              Request RESULT =null;
		int requestleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int requestright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Request request = (Request)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		RESULT = request;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("main",16, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // optionProd ::= COMILLA WORLDS COMILLA DOS_PUNTOS COMILLA ALL COMILLA 
            {
              Request RESULT =null;
		int allleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int allright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Token all = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		worldBuilder.withName(JsonParserSym.terminalNames[all.getType()]);
                                                                                    RESULT =new Request(FIND_ALL, null);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("optionProd",15, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // optionProd ::= COMILLA WORLD COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA 
            {
              Request RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		worldBuilder.withName(String.valueOf(name.getValue()));
                                                                                    RESULT = new Request(FIND_BY_NAME, worldBuilder.build());
                                                                                    worldBuilder.clean();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("optionProd",15, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // optionProd ::= worldProd 
            {
              Request RESULT =null;
		RESULT = new Request(CREATE, worldBuilder.build());
                                                                                    System.out.println("Creando el mundo  "+RESULT);
                                                                                    worldBuilder.clean();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("optionProd",15, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // worldProd ::= worldProd COMA worldAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldProd",0, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // worldProd ::= worldAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldProd",0, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // worldAttribute ::= COMILLA NAME COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Token name = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		worldBuilder.withName(String.valueOf(name.getValue()));
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // worldAttribute ::= COMILLA ROWS COMILLA DOS_PUNTOS numProd 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double number = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		worldBuilder.withRows(number);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // worldAttribute ::= COMILLA COLS COMILLA DOS_PUNTOS numProd 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double number = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		worldBuilder.withCols(number);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // worldAttribute ::= COMILLA CONFIG COMILLA DOS_PUNTOS LLAVE_A configProd LLAVE_C 
            {
              Object RESULT =null;
		worldBuilder.withConfig(configBuilder.build());
                                                                                            configBuilder.clean();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // worldAttribute ::= COMILLA BOARD COMILLA DOS_PUNTOS CORCHETE_A boardArray CORCHETE_C 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		ArrayList<Board> array = (ArrayList<Board>)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		worldBuilder.withBoards(array);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // worldAttribute ::= COMILLA BOXES COMILLA DOS_PUNTOS CORCHETE_A pointArray CORCHETE_C 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		ArrayList<Point> array = (ArrayList<Point>)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		worldBuilder.withBoxes(array);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // worldAttribute ::= COMILLA TARGETS COMILLA DOS_PUNTOS CORCHETE_A pointArray CORCHETE_C 
            {
              Object RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		ArrayList<Point> array = (ArrayList<Point>)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		worldBuilder.withTargets(array);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // worldAttribute ::= COMILLA PLAYER COMILLA DOS_PUNTOS LLAVE_A pointProd LLAVE_C 
            {
              Object RESULT =null;
		worldBuilder.withPlayer(pointBuilder.build());
                                                                                            pointBuilder.clean();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute",1, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pointArray ::= pointArray COMA LLAVE_A pointProd LLAVE_C 
            {
              ArrayList<Point> RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)).right;
		ArrayList<Point> array = (ArrayList<Point>)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)).value;
		array.add(pointBuilder.build());
                                                                                            pointBuilder.clean();
                                                                                            RESULT = array;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointArray",14, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pointArray ::= LLAVE_A pointProd LLAVE_C 
            {
              ArrayList<Point> RESULT =null;
		RESULT = new ArrayList<Point>();
                                                                                            RESULT.add(pointBuilder.build());
                                                                                            pointBuilder.clean();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointArray",14, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pointProd ::= pointProd COMA pointAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointProd",19, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pointProd ::= pointAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointProd",19, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pointAttribute ::= COMILLA posType COMILLA DOS_PUNTOS numProd 
            {
              Object RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).right;
		Integer pt = (Integer)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double number = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		
        if(pt == POSX){
            pointBuilder.withPosX(number);
        } else {
            pointBuilder.withPosY(number);
        }
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointAttribute",20, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boardArray ::= boardArray COMA LLAVE_A boardProd LLAVE_C 
            {
              ArrayList<Board> RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)).right;
		ArrayList<Board> array = (ArrayList<Board>)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)).value;
		int boardleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int boardright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Object board = (Object)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		array.add(boardBuilder.withPoint(pointBuilder.build()).build());
                                                                            pointBuilder.clean();
                                                                            boardBuilder.clean();
                                                                            RESULT = array;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardArray",13, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boardArray ::= LLAVE_A boardProd LLAVE_C 
            {
              ArrayList<Board> RESULT =null;
		RESULT = new ArrayList<Board>();
                                                                            RESULT.add(boardBuilder.withPoint(pointBuilder.build()).build());
                                                                            pointBuilder.clean();
                                                                            boardBuilder.clean();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardArray",13, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boardProd ::= boardProd COMA boardAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardProd",17, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boardProd ::= boardAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardProd",17, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boardAttribute ::= COMILLA posType COMILLA DOS_PUNTOS numProd 
            {
              Object RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).right;
		Integer pt = (Integer)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).value;
		int numberleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double number = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		
        if(pt == POSX){
            pointBuilder.withPosX(number);
        } else {
            pointBuilder.withPosY(number);
        }
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardAttribute",18, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-4)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boardAttribute ::= COMILLA TYPE COMILLA DOS_PUNTOS COMILLA boardType COMILLA 
            {
              Object RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int btright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Integer bt = (Integer)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		boardBuilder.withType(bt);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardAttribute",18, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boardType ::= BRICK 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = b.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardType",12, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boardType ::= HALL 
            {
              Integer RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token h = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = h.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardType",12, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // posType ::= POSX 
            {
              Integer RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token x = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = x.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("posType",11, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // posType ::= POSY 
            {
              Integer RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token y = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = y.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("posType",11, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // configProd ::= configProd COMA configAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("configProd",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // configProd ::= configAttribute 
            {
              Object RESULT =null;

              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("configProd",2, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // configAttribute ::= COMILLA colorType COMILLA DOS_PUNTOS COMILLA HEXADECIMAL COMILLA 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-5)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Token value = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		
        switch (type) {
            case BOX_COLOR -> configBuilder.withBoxColor(String.valueOf(value.getValue()));
            case BOX_ON_TARGET_COLOR -> configBuilder.withBoxOnTargetColor(String.valueOf(value.getValue()));
            case TARGET_COLOR -> configBuilder.withTargetColor(String.valueOf(value.getValue()));
            case BRICK_COLOR -> configBuilder.withBrickColor(String.valueOf(value.getValue()));
            case HALL_COLOR -> configBuilder.withHallColor(String.valueOf(value.getValue()));
            case UNDEFINED_COLOR -> configBuilder.withUndefinedColor(String.valueOf(value.getValue()));
            case PLAYER_COLOR -> configBuilder.withPlayerColor(String.valueOf(value.getValue()));
            case default -> System.err.println("Something went wrong. :c");
        }
    
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("configAttribute",3, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-6)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // colorType ::= BOX_COLOR 
            {
              Integer RESULT =null;
		int colorTypeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int colorTyperight = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token colorType = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = colorType.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType",10, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // colorType ::= BOX_ON_TARGET_COLOR 
            {
              Integer RESULT =null;
		int colorTypeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int colorTyperight = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token colorType = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = colorType.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType",10, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // colorType ::= TARGET_COLOR 
            {
              Integer RESULT =null;
		int colorTypeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int colorTyperight = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token colorType = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = colorType.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType",10, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // colorType ::= BRICK_COLOR 
            {
              Integer RESULT =null;
		int colorTypeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int colorTyperight = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token colorType = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = colorType.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType",10, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // colorType ::= HALL_COLOR 
            {
              Integer RESULT =null;
		int colorTypeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int colorTyperight = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token colorType = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = colorType.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType",10, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // colorType ::= UNDEFINED_COLOR 
            {
              Integer RESULT =null;
		int colorTypeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int colorTyperight = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token colorType = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = colorType.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType",10, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // colorType ::= PLAYER_COLOR 
            {
              Integer RESULT =null;
		int colorTypeleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int colorTyperight = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token colorType = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = colorType.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType",10, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // numProd ::= ENTERO 
            {
              Double RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token number = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = Double.valueOf(number.getValue());
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("numProd",8, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // numProd ::= COMILLA a COMILLA 
            {
              Double RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Double number = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		RESULT = number;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("numProd",8, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // a ::= a SUMA b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = n1 + n2;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("a",4, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // a ::= a RESTA b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = n1 - n2;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("a",4, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // a ::= b 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = n1;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("a",4, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // b ::= b MULTIPLICACION c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = n1 * n2;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b",5, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // b ::= b DIVISION c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = n1 / n2;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b",5, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // b ::= RESTA c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = -1 * n1;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b",5, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // b ::= c 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = n1;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b",5, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // c ::= PARENTESIS_A a PARENTESIS_C 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		RESULT = n1;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("c",6, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-2)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // c ::= d 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = n1;
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("c",6, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // d ::= funcion PARENTESIS_A a PARENTESIS_C 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-1)).value;
		RESULT = f == JsonParserSym.FLOOR ? Math.floor(n1): Math.ceil(n1);
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("d",7, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.elementAt(CUP$JsonParser$top-3)), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // d ::= ENTERO 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = Double.valueOf(e.getValue());
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("d",7, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // d ::= DECIMAL 
            {
              Double RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = Double.valueOf(d.getValue());
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("d",7, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcion ::= FLOOR 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = f.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funcion ::= CEIL 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$JsonParser$stack.peek()).value;
		RESULT = c.getType();
              CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JsonParser$stack.peek()), RESULT);
            }
          return CUP$JsonParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$JsonParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JsonParser$do_action(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack            CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
              return CUP$JsonParser$do_action_part00000000(
                               CUP$JsonParser$act_num,
                               CUP$JsonParser$parser,
                               CUP$JsonParser$stack,
                               CUP$JsonParser$top);
    }
}

}
