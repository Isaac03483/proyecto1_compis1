
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.mio.server.compiler.parser;

import com.mio.server.compiler.Token;
import com.mio.server.builders.*;
import com.mio.server.compiler.lexer.JsonLexer;
import com.mio.server.exceptions.DuplicateAttributeException;
import com.mio.server.models.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class JsonParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return JsonParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public JsonParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public JsonParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JsonParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\022\005\000\002\022" +
    "\004\000\002\021\011\000\002\021\011\000\002\021\003" +
    "\000\002\021\004\000\002\002\005\000\002\002\003\000" +
    "\002\002\004\000\002\003\011\000\002\003\007\000\002" +
    "\003\007\000\002\003\011\000\002\003\011\000\002\003" +
    "\011\000\002\003\011\000\002\003\011\000\002\003\004" +
    "\000\002\017\007\000\002\017\005\000\002\017\004\000" +
    "\002\025\005\000\002\025\003\000\002\025\004\000\002" +
    "\026\007\000\002\016\007\000\002\016\005\000\002\016" +
    "\004\000\002\023\005\000\002\023\003\000\002\023\004" +
    "\000\002\024\007\000\002\024\011\000\002\024\004\000" +
    "\002\015\003\000\002\015\003\000\002\020\003\000\002" +
    "\020\003\000\002\004\005\000\002\004\003\000\002\004" +
    "\004\000\002\005\011\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\012\003\000\002" +
    "\012\005\000\002\012\004\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\004\000\002\007\003\000\002\010\005\000" +
    "\002\010\003\000\002\010\004\000\002\011\006\000\002" +
    "\011\003\000\002\011\003\000\002\013\003\000\002\013" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\003\005\032\006\001\002\000\004\002" +
    "\262\001\002\000\004\033\261\001\002\000\006\003\011" +
    "\022\012\001\002\000\004\033\260\001\002\000\006\033" +
    "\ufff9\040\ufff9\001\002\000\010\022\257\033\241\040\256" +
    "\001\002\000\026\004\027\005\021\006\022\007\023\010" +
    "\020\011\026\012\024\013\025\014\243\015\242\001\002" +
    "\000\006\033\ufffc\040\014\001\002\000\006\003\016\022" +
    "\017\001\002\000\006\033\ufffa\040\ufffa\001\002\000\004" +
    "\033\241\001\002\000\022\004\027\005\021\006\022\007" +
    "\023\010\020\011\026\012\024\013\025\001\002\000\004" +
    "\022\211\001\002\000\004\022\206\001\002\000\004\022" +
    "\203\001\002\000\004\022\176\001\002\000\004\022\171" +
    "\001\002\000\004\022\127\001\002\000\004\022\035\001" +
    "\002\000\004\022\030\001\002\000\004\041\031\001\002" +
    "\000\004\022\032\001\002\000\004\054\033\001\002\000" +
    "\004\022\034\001\002\000\006\033\ufff7\040\ufff7\001\002" +
    "\000\004\041\036\001\002\000\004\036\037\001\002\000" +
    "\006\003\041\032\042\001\002\000\006\037\123\040\122" +
    "\001\002\000\004\040\121\001\002\000\006\003\043\022" +
    "\044\001\002\000\004\040\120\001\002\000\006\020\053" +
    "\021\052\001\002\000\006\033\050\040\047\001\002\000" +
    "\006\033\uffea\040\uffea\001\002\000\004\022\044\001\002" +
    "\000\006\037\uffed\040\uffed\001\002\000\006\033\uffeb\040" +
    "\uffeb\001\002\000\004\022\uffdb\001\002\000\004\022\uffdc" +
    "\001\002\000\004\022\055\001\002\000\004\041\056\001" +
    "\002\000\010\003\060\022\061\052\062\001\002\000\006" +
    "\033\uffe8\040\uffe8\001\002\000\004\022\117\001\002\000" +
    "\020\003\071\034\076\044\075\052\066\053\063\055\065" +
    "\056\074\001\002\000\006\033\uffcf\040\uffcf\001\002\000" +
    "\016\022\uffc0\035\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\001\002\000\004\034\114\001\002\000\004\034\uffbf\001" +
    "\002\000\016\022\uffc1\035\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\001\002\000\016\022\uffc4\035\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\001\002\000\016\022\uffc6\035\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000\004\035" +
    "\113\001\002\000\016\022\uffca\035\uffca\043\uffca\044\uffca" +
    "\045\104\046\105\001\002\000\010\022\112\043\102\044" +
    "\100\001\002\000\004\034\uffbe\001\002\000\016\003\071" +
    "\034\076\052\066\053\063\055\065\056\074\001\002\000" +
    "\020\003\071\034\076\044\075\052\066\053\063\055\065" +
    "\056\074\001\002\000\010\035\101\043\102\044\100\001" +
    "\002\000\020\003\071\034\076\044\075\052\066\053\063" +
    "\055\065\056\074\001\002\000\016\022\uffc5\035\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\001\002\000\020\003\071" +
    "\034\076\044\075\052\066\053\063\055\065\056\074\001" +
    "\002\000\016\022\uffcc\035\uffcc\043\uffcc\044\uffcc\045\104" +
    "\046\105\001\002\000\016\003\071\034\076\052\066\053" +
    "\063\055\065\056\074\001\002\000\016\003\071\034\076" +
    "\052\066\053\063\055\065\056\074\001\002\000\016\022" +
    "\uffc8\035\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\001\002" +
    "\000\016\022\uffc9\035\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\001\002\000\016\022\uffcb\035\uffcb\043\uffcb\044\uffcb" +
    "\045\104\046\105\001\002\000\016\022\uffc7\035\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000\006\033\uffce" +
    "\040\uffce\001\002\000\016\022\uffc3\035\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\001\002\000\020\003\071\034\076" +
    "\044\075\052\066\053\063\055\065\056\074\001\002\000" +
    "\010\035\116\043\102\044\100\001\002\000\016\022\uffc2" +
    "\035\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000" +
    "\006\033\uffcd\040\uffcd\001\002\000\006\033\uffe9\040\uffe9" +
    "\001\002\000\006\037\uffec\040\uffec\001\002\000\004\032" +
    "\124\001\002\000\006\033\ufff1\040\ufff1\001\002\000\006" +
    "\003\043\022\044\001\002\000\006\033\126\040\047\001" +
    "\002\000\006\037\uffee\040\uffee\001\002\000\004\041\130" +
    "\001\002\000\004\036\131\001\002\000\006\003\132\032" +
    "\134\001\002\000\004\040\170\001\002\000\006\037\164" +
    "\040\163\001\002\000\006\003\136\022\140\001\002\000" +
    "\006\033\160\040\157\001\002\000\006\022\156\040\155" +
    "\001\002\000\006\033\uffe3\040\uffe3\001\002\000\010\017" +
    "\142\020\053\021\052\001\002\000\004\022\152\001\002" +
    "\000\004\022\143\001\002\000\004\041\144\001\002\000" +
    "\004\022\145\001\002\000\006\050\147\051\146\001\002" +
    "\000\004\022\uffde\001\002\000\004\022\uffdd\001\002\000" +
    "\004\022\151\001\002\000\006\033\uffe0\040\uffe0\001\002" +
    "\000\004\041\153\001\002\000\010\003\060\022\061\052" +
    "\062\001\002\000\006\033\uffe1\040\uffe1\001\002\000\006" +
    "\033\uffe2\040\uffe2\001\002\000\006\033\uffdf\040\uffdf\001" +
    "\002\000\006\003\161\022\140\001\002\000\006\037\uffe6" +
    "\040\uffe6\001\002\000\004\022\156\001\002\000\006\033" +
    "\uffe4\040\uffe4\001\002\000\004\032\165\001\002\000\006" +
    "\033\ufff3\040\ufff3\001\002\000\006\003\136\022\140\001" +
    "\002\000\006\033\167\040\157\001\002\000\006\037\uffe7" +
    "\040\uffe7\001\002\000\006\037\uffe5\040\uffe5\001\002\000" +
    "\004\041\172\001\002\000\004\036\173\001\002\000\006" +
    "\003\041\032\042\001\002\000\006\037\175\040\122\001" +
    "\002\000\006\033\ufff2\040\ufff2\001\002\000\004\041\177" +
    "\001\002\000\004\032\200\001\002\000\006\003\043\022" +
    "\044\001\002\000\006\033\202\040\047\001\002\000\006" +
    "\033\ufff0\040\ufff0\001\002\000\004\041\204\001\002\000" +
    "\010\003\060\022\061\052\062\001\002\000\006\033\ufff5" +
    "\040\ufff5\001\002\000\004\041\207\001\002\000\010\003" +
    "\060\022\061\052\062\001\002\000\006\033\ufff6\040\ufff6" +
    "\001\002\000\004\041\212\001\002\000\004\032\213\001" +
    "\002\000\006\003\215\022\216\001\002\000\006\033\uffd9" +
    "\040\uffd9\001\002\000\004\040\240\001\002\000\020\023" +
    "\226\024\232\025\230\026\231\027\225\030\223\031\227" +
    "\001\002\000\006\033\221\040\220\001\002\000\004\022" +
    "\216\001\002\000\006\033\ufff4\040\ufff4\001\002\000\006" +
    "\033\uffda\040\uffda\001\002\000\004\022\uffd2\001\002\000" +
    "\004\022\233\001\002\000\004\022\uffd3\001\002\000\004" +
    "\022\uffd6\001\002\000\004\022\uffd0\001\002\000\004\022" +
    "\uffd4\001\002\000\004\022\uffd1\001\002\000\004\022\uffd5" +
    "\001\002\000\004\041\234\001\002\000\004\022\235\001" +
    "\002\000\004\047\236\001\002\000\004\022\237\001\002" +
    "\000\006\033\uffd7\040\uffd7\001\002\000\006\033\uffd8\040" +
    "\uffd8\001\002\000\006\033\uffef\040\uffef\001\002\000\004" +
    "\022\251\001\002\000\004\022\244\001\002\000\004\041" +
    "\245\001\002\000\004\022\246\001\002\000\004\016\247" +
    "\001\002\000\004\022\250\001\002\000\004\033\ufffe\001" +
    "\002\000\004\041\252\001\002\000\004\022\253\001\002" +
    "\000\004\054\254\001\002\000\004\022\255\001\002\000" +
    "\004\033\ufffd\001\002\000\006\033\ufff8\040\ufff8\001\002" +
    "\000\004\033\ufffb\001\002\000\004\002\000\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\022\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\012\003\007\021\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\044\026" +
    "\045\001\001\000\002\001\001\000\004\020\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\072\007\071\010\067\011\066\013\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\110\011\066\013" +
    "\063\001\001\000\014\006\076\007\071\010\067\011\066" +
    "\013\063\001\001\000\002\001\001\000\012\007\107\010" +
    "\067\011\066\013\063\001\001\000\002\001\001\000\012" +
    "\007\102\010\067\011\066\013\063\001\001\000\002\001" +
    "\001\000\010\010\106\011\066\013\063\001\001\000\010" +
    "\010\105\011\066\013\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\006\114\007\071\010" +
    "\067\011\066\013\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\124" +
    "\026\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\134\024" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\165\024\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\200\026\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\216\005\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\223\001\001\000\002\001" +
    "\001\000\004\005\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JsonParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JsonParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JsonParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    BoardBuilder boardBuilder;
    PointBuilder pointBuilder;
    WConfigBuilder configBuilder;
    WorldBuilder worldBuilder;
    JsonLexer lexer;
    List<WorldError> errors;

    public JsonParser(JsonLexer lexer){

        super(lexer);
        this.lexer = lexer;
        this.boardBuilder = new BoardBuilder();
        this.pointBuilder = new PointBuilder();
        this.configBuilder = new WConfigBuilder();
        this.worldBuilder = new WorldBuilder();
        errors = new ArrayList<>();

    }
    
    public List<WorldError> getErrors(){
        return errors;
    }

    public Symbol scan() throws Exception {
            Symbol symbol = this.getScanner().next_token();
            if (symbol == null) {
                return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
            }

            while(symbol != null && symbol.sym == JsonParserSym.SYM) {
//                this.report_expected_token_ids();
                System.out.println("Ingorando: " + symbol.value.toString());
                Token token = (Token) symbol.value;
                errors.add(new WorldError(token.getValue(),token.getLine(),token.getColumn(), ErrorType.LEXICO,"No existe esta cadena en el lenguaje"));
                symbol = this.getScanner().next_token();
            }

            if (symbol == null) {
                return this.getSymbolFactory().newSymbol("END_OF_FILE", this.EOF_sym());
            }

            return symbol;
    }

    public void report_error(String message, Object info) {
        System.out.println("public void report_error");
    }

    public void report_fatal_error(String message, Object info) {
        System.out.println("public void report_fatal_error");
    }

    public void syntax_error(Symbol cur_token) {
        Token token = (Token) cur_token.value;

        if (cur_token.sym == JsonParserSym.EOF) {
//          String er = "Simbolo inesperado, se esperaba: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Simbolo inesperado";
            errors.add(new WorldError("Fin del archivo", token.getLine(),token.getColumn(), ErrorType.SINTACTICO,er));
            System.out.println(er);
        } else {
            String er = "Simbolo inesperado";
            errors.add(new WorldError(token.getValue(), token.getLine(), token.getColumn(),ErrorType.SINTACTICO,er));

            System.out.println(er);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == JsonParserSym.EOF) {
            Token tok = (Token) cur_token.value;
            String er = "Error irrecuperable se llego al final del archivo";
            errors.add(new WorldError("FIN ARCHIVO", tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
            System.out.println(er);
        } else {
            Token tok = (Token) cur_token.value;
            //String er = "Error irrecuperable, un posible simbolo esperado: "+ simbolosTerminales.obtenerSimbolos(expected_token_ids()).toString();
            String er = "Error irrecuperable resuelva el error anterior";
            errors.add(new WorldError(tok.getValue(), tok.getLine(), tok.getColumn(), ErrorType.SINTACTICO, er));
            System.out.println(er);
        }
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$JsonParser$actions {
  private final JsonParser parser;

  /** Constructor */
  CUP$JsonParser$actions(JsonParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$JsonParser$do_action_part00000000(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack            CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JsonParser$result;

      /* select the action based on the action number */
        switch (CUP$JsonParser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0 -> { // $START ::= main EOF
                {
                    Object RESULT = null;
                    int start_valleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int start_valright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Request start_val = (Request) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    RESULT = start_val;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                /* ACCEPT */
                CUP$JsonParser$parser.done_parsing();
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1 -> { // main ::= LLAVE_A optionProd LLAVE_C
                {
                    Request RESULT = null;
                    int requestleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int requestright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Request request = (Request) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    RESULT = request;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("main", 16, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2 -> { // main ::= error LLAVE_C
                {
                    Request RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("main", 16, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3 -> { // optionProd ::= COMILLA WORLDS COMILLA DOS_PUNTOS COMILLA ALL COMILLA
                {
                    Request RESULT = null;
                    int allleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int allright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Token all = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    worldBuilder.withName(JsonParserSym.terminalNames[all.getType()]);
                    RESULT = new Request(RequestType.FIND_ALL, null);
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("optionProd", 15, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4 -> { // optionProd ::= COMILLA WORLD COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA
                {
                    Request RESULT = null;
                    int nameleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int nameright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Token name = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    worldBuilder.withName(String.valueOf(name.getValue()));
                    RESULT = new Request(RequestType.FIND_BY_NAME, worldBuilder.build());
                    worldBuilder.clean();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("optionProd", 15, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5 -> { // optionProd ::= worldProd
                {
                    Request RESULT = null;
                    RESULT = new Request(RequestType.CREATE, worldBuilder.build());
                    System.out.println("Creando el mundo  " + RESULT);
                    worldBuilder.clean();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("optionProd", 15, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6 -> { // optionProd ::= error COMILLA
                {
                    Request RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("optionProd", 15, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7 -> { // worldProd ::= worldProd COMA worldAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldProd", 0, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8 -> { // worldProd ::= worldAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldProd", 0, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9 -> { // worldProd ::= error COMA
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldProd", 0, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10 -> { // worldAttribute ::= COMILLA NAME COMILLA DOS_PUNTOS COMILLA PALABRA COMILLA
                {
                    Object RESULT = null;
                    int nameleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int nameright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Token name = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;

                    try {
                        worldBuilder.withName(String.valueOf(name.getValue()));
                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(name.getValue(), name.getLine(), name.getColumn(), ErrorType.SEMANTICO, e.getMessage()));
                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11 -> { // worldAttribute ::= COMILLA ROWS COMILLA DOS_PUNTOS numProd
                {
                    Object RESULT = null;
                    int rowsleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).left;
                    int rowsright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).right;
                    Token rows = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).value;
                    int numberleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int numberright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double number = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;

                    try {
                        worldBuilder.withRows(number);
                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[rows.getType()], rows.getLine(), rows.getColumn(), ErrorType.SEMANTICO, e.getMessage()));
                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12 -> { // worldAttribute ::= COMILLA COLS COMILLA DOS_PUNTOS numProd
                {
                    Object RESULT = null;
                    int colsleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).left;
                    int colsright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).right;
                    Token cols = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).value;
                    int numberleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int numberright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double number = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;

                    try {
                        worldBuilder.withCols(number);
                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[cols.getType()], cols.getLine(), cols.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13 -> { // worldAttribute ::= COMILLA CONFIG COMILLA DOS_PUNTOS LLAVE_A configProd LLAVE_C
                {
                    Object RESULT = null;
                    int configleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).left;
                    int configright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).right;
                    Token config = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).value;

                    try {
                        worldBuilder.withConfig(configBuilder.build());
                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[config.getType()], config.getLine(), config.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }
                    configBuilder.clean();

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14 -> { // worldAttribute ::= COMILLA BOARD COMILLA DOS_PUNTOS CORCHETE_A boardArray CORCHETE_C
                {
                    Object RESULT = null;
                    int boardleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).left;
                    int boardright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).right;
                    Token board = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).value;
                    int arrayleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int arrayright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    ArrayList<Board> array = (ArrayList<Board>) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;

                    try {
                        worldBuilder.withBoards(array);

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[board.getType()], board.getLine(), board.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15 -> { // worldAttribute ::= COMILLA BOXES COMILLA DOS_PUNTOS CORCHETE_A pointArray CORCHETE_C
                {
                    Object RESULT = null;
                    int boxesleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).left;
                    int boxesright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).right;
                    Token boxes = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).value;
                    int arrayleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int arrayright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    ArrayList<Point> array = (ArrayList<Point>) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;

                    try {
                        worldBuilder.withBoxes(array);

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[boxes.getType()], boxes.getLine(), boxes.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16 -> { // worldAttribute ::= COMILLA TARGETS COMILLA DOS_PUNTOS CORCHETE_A pointArray CORCHETE_C
                {
                    Object RESULT = null;
                    int targetleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).left;
                    int targetright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).right;
                    Token target = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).value;
                    int arrayleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int arrayright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    ArrayList<Point> array = (ArrayList<Point>) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;

                    try {
                        worldBuilder.withTargets(array);

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[target.getType()], target.getLine(), target.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17 -> { // worldAttribute ::= COMILLA PLAYER COMILLA DOS_PUNTOS LLAVE_A pointProd LLAVE_C
                {
                    Object RESULT = null;
                    int playerleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).left;
                    int playerright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).right;
                    Token player = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).value;

                    try {
                        worldBuilder.withPlayer(pointBuilder.build());

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[player.getType()], player.getLine(), player.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }
                    pointBuilder.clean();

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18 -> { // worldAttribute ::= error LLAVE_C
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("worldAttribute", 1, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19 -> { // pointArray ::= pointArray COMA LLAVE_A pointProd LLAVE_C
                {
                    ArrayList<Point> RESULT = null;
                    int arrayleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).left;
                    int arrayright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).right;
                    ArrayList<Point> array = (ArrayList<Point>) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).value;

                    array.add(pointBuilder.build());

                    RESULT = array;
                    pointBuilder.clean();

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointArray", 13, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20 -> { // pointArray ::= LLAVE_A pointProd LLAVE_C
                {
                    ArrayList<Point> RESULT = null;

                    RESULT = new ArrayList<Point>();
                    RESULT.add(pointBuilder.build());
                    pointBuilder.clean();

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointArray", 13, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21 -> { // pointArray ::= error COMA
                {
                    ArrayList<Point> RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointArray", 13, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22 -> { // pointProd ::= pointProd COMA pointAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointProd", 19, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23 -> { // pointProd ::= pointAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointProd", 19, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24 -> { // pointProd ::= error COMA
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointProd", 19, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25 -> { // pointAttribute ::= COMILLA posType COMILLA DOS_PUNTOS numProd
                {
                    Object RESULT = null;
                    int ptleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).left;
                    int ptright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).right;
                    Token pt = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).value;
                    int numberleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int numberright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double number = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;

                    try {
                        if (pt.getType() == JsonParserSym.POSX) {
                            pointBuilder.withPosX(number);
                        } else {
                            pointBuilder.withPosY(number);
                        }

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[pt.getType()], pt.getLine(), pt.getColumn(), ErrorType.SEMANTICO, e.getMessage()));
                    }


                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("pointAttribute", 20, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26 -> { // boardArray ::= boardArray COMA LLAVE_A boardProd LLAVE_C
                {
                    ArrayList<Board> RESULT = null;
                    int arrayleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).left;
                    int arrayright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).right;
                    ArrayList<Board> array = (ArrayList<Board>) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).value;
                    int llleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).left;
                    int llright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).right;
                    Token ll = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).value;

                    try {
                        array.add(boardBuilder.withPoint(pointBuilder.build()).build());

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(boardBuilder.getPoint().toString(), ll.getLine(), ll.getColumn(), ErrorType.SEMANTICO, e.getMessage()));
                    }
                    pointBuilder.clean();
                    boardBuilder.clean();
                    RESULT = array;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardArray", 12, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27 -> { // boardArray ::= LLAVE_A boardProd LLAVE_C
                {
                    ArrayList<Board> RESULT = null;
                    int llleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).left;
                    int llright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).right;
                    Token ll = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).value;

                    RESULT = new ArrayList<Board>();
                    try {
                        RESULT.add(boardBuilder.withPoint(pointBuilder.build()).build());
                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(boardBuilder.getPoint().toString(), ll.getLine(), ll.getColumn(), ErrorType.SEMANTICO, e.getMessage()));
                    }
                    pointBuilder.clean();
                    boardBuilder.clean();

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardArray", 12, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28 -> { // boardArray ::= error COMA
                {
                    ArrayList<Board> RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardArray", 12, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29 -> { // boardProd ::= boardProd COMA boardAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardProd", 17, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30 -> { // boardProd ::= boardAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardProd", 17, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31 -> { // boardProd ::= error COMA
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardProd", 17, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32 -> { // boardAttribute ::= COMILLA posType COMILLA DOS_PUNTOS numProd
                {
                    Object RESULT = null;
                    int cleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).left;
                    int cright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).right;
                    Token c = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)).value;
                    int ptleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).left;
                    int ptright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).right;
                    Token pt = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).value;
                    int numberleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int numberright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double number = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;

                    try {
                        if (pt.getType() == JsonParserSym.POSX) {
                            pointBuilder.withPosX(number);
                        } else {
                            pointBuilder.withPosY(number);
                        }

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[pt.getType()], pt.getLine(), pt.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }


                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardAttribute", 18, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 4)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33 -> { // boardAttribute ::= COMILLA TYPE COMILLA DOS_PUNTOS COMILLA boardType COMILLA
                {
                    Object RESULT = null;
                    int tpleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).left;
                    int tpright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).right;
                    Token tp = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).value;
                    int btleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int btright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    String bt = (String) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;

                    try {

                        boardBuilder.withType(bt);
                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[tp.getType()], tp.getLine(), tp.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardAttribute", 18, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34 -> { // boardAttribute ::= error COMILLA
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardAttribute", 18, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35 -> { // boardType ::= BRICK
                {
                    String RESULT = null;
                    int bleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int bright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token b = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = JsonParserSym.terminalNames[b.getType()];
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardType", 11, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36 -> { // boardType ::= HALL
                {
                    String RESULT = null;
                    int hleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int hright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token h = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = JsonParserSym.terminalNames[h.getType()];
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("boardType", 11, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37 -> { // posType ::= POSX
                {
                    Token RESULT = null;
                    int xleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int xright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token x = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = x;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("posType", 14, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38 -> { // posType ::= POSY
                {
                    Token RESULT = null;
                    int yleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int yright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token y = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = y;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("posType", 14, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39 -> { // configProd ::= configProd COMA configAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("configProd", 2, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40 -> { // configProd ::= configAttribute
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("configProd", 2, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41 -> { // configProd ::= error COMA
                {
                    Object RESULT = null;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("configProd", 2, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42 -> { // configAttribute ::= COMILLA colorType COMILLA DOS_PUNTOS COMILLA HEXADECIMAL COMILLA
                {
                    Object RESULT = null;
                    int typeleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).left;
                    int typeright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).right;
                    Integer type = (Integer) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 5)).value;
                    int valueleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int valueright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Token value = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;

                    try {
                        switch (type) {
                            case JsonParserSym.BOX_COLOR -> configBuilder.withBoxColor(value.getValue());
                            case JsonParserSym.BOX_ON_TARGET_COLOR ->
                                    configBuilder.withBoxOnTargetColor(value.getValue());
                            case JsonParserSym.TARGET_COLOR -> configBuilder.withTargetColor(value.getValue());
                            case JsonParserSym.BRICK_COLOR -> configBuilder.withBrickColor(value.getValue());
                            case JsonParserSym.HALL_COLOR -> configBuilder.withHallColor(value.getValue());
                            case JsonParserSym.UNDEFINED_COLOR -> configBuilder.withUndefinedColor(value.getValue());
                            case JsonParserSym.PLAYER_COLOR -> configBuilder.withPlayerColor(value.getValue());
                            case default -> System.err.println("Something went wrong. :c");
                        }

                    } catch (DuplicateAttributeException e) {
                        errors.add(new WorldError(JsonParserSym.terminalNames[type], value.getLine(), value.getColumn(), ErrorType.SEMANTICO, e.getMessage()));

                    }

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("configAttribute", 3, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 6)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43 -> { // colorType ::= BOX_COLOR
                {
                    Integer RESULT = null;
                    int colorTypeleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int colorTyperight = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token colorType = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = colorType.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType", 10, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44 -> { // colorType ::= BOX_ON_TARGET_COLOR
                {
                    Integer RESULT = null;
                    int colorTypeleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int colorTyperight = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token colorType = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = colorType.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType", 10, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45 -> { // colorType ::= TARGET_COLOR
                {
                    Integer RESULT = null;
                    int colorTypeleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int colorTyperight = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token colorType = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = colorType.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType", 10, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46 -> { // colorType ::= BRICK_COLOR
                {
                    Integer RESULT = null;
                    int colorTypeleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int colorTyperight = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token colorType = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = colorType.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType", 10, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47 -> { // colorType ::= HALL_COLOR
                {
                    Integer RESULT = null;
                    int colorTypeleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int colorTyperight = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token colorType = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = colorType.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType", 10, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48 -> { // colorType ::= UNDEFINED_COLOR
                {
                    Integer RESULT = null;
                    int colorTypeleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int colorTyperight = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token colorType = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = colorType.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType", 10, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49 -> { // colorType ::= PLAYER_COLOR
                {
                    Integer RESULT = null;
                    int colorTypeleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int colorTyperight = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token colorType = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = colorType.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("colorType", 10, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50 -> { // numProd ::= ENTERO
                {
                    Double RESULT = null;
                    int numberleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int numberright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token number = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = Double.valueOf(number.getValue());
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("numProd", 8, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51 -> { // numProd ::= COMILLA a COMILLA
                {
                    Double RESULT = null;
                    int numberleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int numberright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Double number = (Double) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    RESULT = number;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("numProd", 8, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52 -> { // numProd ::= error COMILLA
                {
                    Double RESULT = null;
                    RESULT = 1.0;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("numProd", 8, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53 -> { // a ::= a SUMA b
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).value;
                    int n2left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n2right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n2 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = n1 + n2;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("a", 4, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54 -> { // a ::= a RESTA b
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).value;
                    int n2left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n2right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n2 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = n1 - n2;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("a", 4, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55 -> { // a ::= b
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = n1;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("a", 4, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56 -> { // b ::= b MULTIPLICACION c
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).value;
                    int n2left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n2right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n2 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = n1 * n2;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b", 5, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57 -> { // b ::= b DIVISION c
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)).value;
                    int dleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int dright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Token d = (Token) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    int n2left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n2right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n2 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;

                    if (n2 == 0) {
                        errors.add(new WorldError(String.valueOf(n2), d.getLine(), d.getColumn(), ErrorType.SEMANTICO, "Imposible dividir entre 0"));
                        n2 = 1.0;
                    }
                    RESULT = n1 / n2;

                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b", 5, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58 -> { // b ::= RESTA c
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = -1 * n1;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b", 5, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59 -> { // b ::= c
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = n1;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("b", 5, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60 -> { // c ::= PARENTESIS_A a PARENTESIS_C
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    RESULT = n1;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("c", 6, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 2)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61 -> { // c ::= d
                {
                    Double RESULT = null;
                    int n1left = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = n1;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("c", 6, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62 -> { // c ::= error PARENTESIS_C
                {
                    Double RESULT = null;
                    RESULT = 1.0;
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("c", 6, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63 -> { // d ::= funcion PARENTESIS_A a PARENTESIS_C
                {
                    Double RESULT = null;
                    int fleft = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).left;
                    int fright = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).right;
                    Integer f = (Integer) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)).value;
                    int n1left = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).left;
                    int n1right = ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).right;
                    Double n1 = (Double) ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 1)).value;
                    RESULT = f == JsonParserSym.FLOOR ? Math.floor(n1) : Math.ceil(n1);
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("d", 7, ((Symbol) CUP$JsonParser$stack.elementAt(CUP$JsonParser$top - 3)), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64 -> { // d ::= ENTERO
                {
                    Double RESULT = null;
                    int eleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int eright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token e = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = Double.valueOf(e.getValue());
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("d", 7, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65 -> { // d ::= DECIMAL
                {
                    Double RESULT = null;
                    int dleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int dright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token d = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = Double.valueOf(d.getValue());
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("d", 7, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66 -> { // funcion ::= FLOOR
                {
                    Integer RESULT = null;
                    int fleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int fright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token f = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = f.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("funcion", 9, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67 -> { // funcion ::= CEIL
                {
                    Integer RESULT = null;
                    int cleft = ((Symbol) CUP$JsonParser$stack.peek()).left;
                    int cright = ((Symbol) CUP$JsonParser$stack.peek()).right;
                    Token c = (Token) ((Symbol) CUP$JsonParser$stack.peek()).value;
                    RESULT = c.getType();
                    CUP$JsonParser$result = parser.getSymbolFactory().newSymbol("funcion", 9, ((Symbol) CUP$JsonParser$stack.peek()), ((Symbol) CUP$JsonParser$stack.peek()), RESULT);
                }
                return CUP$JsonParser$result;
            }

            /* . . . . . .*/
            default -> throw new Exception(
                    "Invalid action number " + CUP$JsonParser$act_num + "found in internal parse table");
        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$JsonParser$do_action(
    int                        CUP$JsonParser$act_num,
    java_cup.runtime.lr_parser CUP$JsonParser$parser,
    java.util.Stack            CUP$JsonParser$stack,
    int                        CUP$JsonParser$top)
    throws java.lang.Exception
    {
              return CUP$JsonParser$do_action_part00000000(
                               CUP$JsonParser$act_num,
                               CUP$JsonParser$parser,
                               CUP$JsonParser$stack,
                               CUP$JsonParser$top);
    }
}

}
