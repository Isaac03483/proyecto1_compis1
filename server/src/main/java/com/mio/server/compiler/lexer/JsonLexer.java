// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: /home/mio/Escritorio/2023/proyecto-1-compis1/server/src/main/jflex/json.jflex

package com.mio.server.compiler.lexer;

/*
compilar archivo.jflex
java -jar jflex-full-1.9.0.jar /home/mio/Escritorio/2023/proyecto-1-compis1/server/src/main/jflex/json.jflex
*/

import com.mio.server.compiler.Token;
import static com.mio.server.compiler.parser.JsonParserSym.*;
import java_cup.runtime.Symbol;




@SuppressWarnings("fallthrough")
public class JsonLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\3\4\1\0\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\11\20\1\21"+
    "\1\0\1\4\1\0\3\4\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\25\1\30\1\31\1\25\1\32\1\33"+
    "\2\25\1\34\2\25\1\35\5\25\1\36\1\37\1\25"+
    "\1\40\1\41\1\42\1\41\1\43\1\41\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\25"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\25\1\63"+
    "\1\64\1\65\1\66\1\25\1\67\1\70\1\71\1\25"+
    "\1\72\1\4\1\73\1\4\53\0\1\4\1\0\1\4"+
    "\12\0\1\4\2\0\1\4\2\0\1\4\u0142\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\5\1"+
    "\1\16\1\17\12\1\1\20\1\21\2\0\22\22\1\0"+
    "\1\23\4\22\1\24\16\22\1\0\1\22\1\25\1\22"+
    "\1\26\4\22\1\27\2\22\1\30\1\22\1\31\1\32"+
    "\1\33\1\22\1\34\2\22\1\0\1\35\1\36\1\37"+
    "\2\22\1\40\6\22\1\41\1\0\3\22\1\42\1\22"+
    "\1\43\2\22\1\44\1\45\6\22\1\46\10\22\1\47"+
    "\10\22\1\50\4\22\1\51\4\22\1\52\1\53\6\22"+
    "\1\54\3\22\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\74\0\360\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u012c\0\u0168"+
    "\0\74\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\74\0\74"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\74\0\74\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc"+
    "\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c"+
    "\0\u09d8\0\u0564\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u05a0\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u05a0"+
    "\0\u0ec4\0\u05a0\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u05a0\0\u0ff0"+
    "\0\u102c\0\u05a0\0\u1068\0\u05a0\0\u05a0\0\u05a0\0\u10a4\0\u05a0"+
    "\0\u10e0\0\u111c\0\u1158\0\u05a0\0\u05a0\0\u05a0\0\u1194\0\u11d0"+
    "\0\u05a0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u05a0\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u05a0\0\74\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u05a0\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\u05a0\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\u1a7c\0\u05a0\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u05a0\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u05a0\0\u05a0\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u05a0\0\u1e00\0\u1e3c"+
    "\0\u1e78\0\u05a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\2\22\1\25\1\26\7\22"+
    "\1\27\1\2\1\30\1\22\1\31\1\32\1\33\4\22"+
    "\1\34\4\22\1\35\1\22\1\36\1\37\1\22\1\40"+
    "\1\41\1\42\2\22\1\43\1\44\76\0\1\3\75\0"+
    "\1\5\1\0\1\5\71\0\1\5\1\0\1\5\10\0"+
    "\2\45\23\0\6\45\37\0\1\46\73\0\1\46\1\0"+
    "\2\20\75\0\50\47\24\0\13\47\1\50\34\47\24\0"+
    "\4\47\1\51\43\47\24\0\11\47\1\52\36\47\24\0"+
    "\1\53\47\47\24\0\34\47\1\54\13\47\24\0\37\47"+
    "\1\55\1\47\1\56\6\47\24\0\37\47\1\57\10\47"+
    "\24\0\22\47\1\60\25\47\24\0\22\47\1\61\25\47"+
    "\24\0\34\47\1\62\2\47\1\63\10\47\24\0\37\47"+
    "\1\64\10\47\24\0\22\47\1\65\24\47\1\66\24\0"+
    "\36\47\1\67\11\47\24\0\37\47\1\70\10\47\21\0"+
    "\2\71\23\0\6\71\41\0\2\72\72\0\2\47\1\0"+
    "\50\47\21\0\2\47\1\0\7\47\1\73\40\47\21\0"+
    "\2\47\1\0\7\47\1\74\40\47\21\0\2\47\1\0"+
    "\12\47\1\75\35\47\21\0\2\47\1\0\11\47\1\76"+
    "\36\47\21\0\2\47\1\0\34\47\1\77\13\47\21\0"+
    "\2\47\1\0\22\47\1\100\23\47\1\101\1\47\21\0"+
    "\2\47\1\0\32\47\1\102\15\47\21\0\2\47\1\0"+
    "\34\47\1\103\1\47\1\104\11\47\21\0\2\47\1\0"+
    "\34\47\1\105\13\47\21\0\2\47\1\0\35\47\1\106"+
    "\12\47\21\0\2\47\1\0\22\47\1\107\25\47\21\0"+
    "\2\47\1\0\42\47\1\110\5\47\21\0\2\47\1\0"+
    "\45\47\1\111\2\47\21\0\2\47\1\0\41\47\1\112"+
    "\6\47\21\0\2\47\1\0\40\47\1\113\7\47\21\0"+
    "\2\47\1\0\25\47\1\114\22\47\21\0\2\47\1\0"+
    "\41\47\1\115\6\47\21\0\2\116\23\0\6\116\41\0"+
    "\2\47\1\0\2\47\1\117\45\47\21\0\2\47\1\0"+
    "\11\47\1\120\36\47\21\0\2\47\1\0\12\47\1\121"+
    "\35\47\21\0\2\47\1\0\11\47\1\122\36\47\21\0"+
    "\2\47\1\0\41\47\1\123\6\47\21\0\2\47\1\0"+
    "\21\47\1\124\4\47\1\125\21\47\21\0\2\47\1\0"+
    "\24\47\1\126\23\47\21\0\2\47\1\0\42\47\1\127"+
    "\5\47\21\0\2\47\1\0\27\47\1\130\20\47\21\0"+
    "\2\47\1\0\34\47\1\131\13\47\21\0\2\47\1\0"+
    "\26\47\1\132\21\47\21\0\2\47\1\0\47\47\1\133"+
    "\21\0\2\47\1\0\14\47\1\134\1\135\32\47\21\0"+
    "\2\47\1\0\42\47\1\136\5\47\21\0\2\47\1\0"+
    "\30\47\1\137\17\47\21\0\2\47\1\0\26\47\1\140"+
    "\21\47\21\0\2\47\1\0\26\47\1\141\21\47\21\0"+
    "\2\47\1\0\34\47\1\142\13\47\21\0\2\143\23\0"+
    "\6\143\41\0\2\47\1\0\10\47\1\144\37\47\21\0"+
    "\2\47\1\0\13\47\1\145\34\47\21\0\2\47\1\0"+
    "\25\47\1\146\22\47\21\0\2\47\1\0\24\47\1\147"+
    "\12\47\1\150\10\47\21\0\2\47\1\0\42\47\1\151"+
    "\5\47\21\0\2\47\1\0\33\47\1\152\14\47\21\0"+
    "\2\47\1\0\32\47\1\153\15\47\21\0\2\47\1\0"+
    "\21\47\1\154\26\47\21\0\2\47\1\0\26\47\1\155"+
    "\21\47\21\0\2\47\1\0\26\47\1\156\21\47\21\0"+
    "\2\47\1\0\27\47\1\157\20\47\21\0\2\47\1\0"+
    "\25\47\1\160\22\47\21\0\2\161\23\0\6\161\41\0"+
    "\2\47\1\0\37\47\1\162\10\47\21\0\2\47\1\0"+
    "\36\47\1\163\11\47\21\0\2\47\1\0\21\47\1\164"+
    "\26\47\21\0\2\47\1\0\30\47\1\165\17\47\21\0"+
    "\2\47\1\0\24\47\1\166\23\47\21\0\2\47\1\0"+
    "\41\47\1\167\6\47\21\0\2\47\1\0\43\47\1\170"+
    "\4\47\21\0\2\47\1\0\32\47\1\171\15\47\21\0"+
    "\2\47\1\0\42\47\1\172\5\47\21\0\2\173\23\0"+
    "\6\173\41\0\2\47\1\0\34\47\1\174\13\47\21\0"+
    "\2\47\1\0\21\47\1\175\26\47\21\0\2\47\1\0"+
    "\24\47\1\176\23\47\21\0\2\47\1\0\37\47\1\177"+
    "\10\47\21\0\2\47\1\0\21\47\1\200\26\47\21\0"+
    "\2\47\1\0\21\47\1\201\20\47\1\202\5\47\21\0"+
    "\2\47\1\0\36\47\1\203\11\47\21\0\2\47\1\0"+
    "\37\47\1\204\10\47\21\0\2\47\1\0\43\47\1\205"+
    "\4\47\21\0\2\47\1\0\37\47\1\206\10\47\21\0"+
    "\2\47\1\0\34\47\1\207\13\47\21\0\2\47\1\0"+
    "\24\47\1\210\23\47\21\0\2\47\1\0\24\47\1\211"+
    "\23\47\21\0\2\47\1\0\26\47\1\212\21\47\21\0"+
    "\2\47\1\0\41\47\1\213\6\47\21\0\2\47\1\0"+
    "\22\47\1\214\25\47\21\0\2\47\1\0\34\47\1\215"+
    "\13\47\21\0\2\47\1\0\37\47\1\216\10\47\21\0"+
    "\2\47\1\0\37\47\1\217\10\47\21\0\2\47\1\0"+
    "\37\47\1\220\10\47\21\0\2\47\1\0\25\47\1\221"+
    "\22\47\21\0\2\47\1\0\41\47\1\222\6\47\21\0"+
    "\2\47\1\0\37\47\1\223\10\47\21\0\2\47\1\0"+
    "\41\47\1\224\6\47\21\0\2\47\1\0\34\47\1\225"+
    "\13\47\21\0\2\47\1\0\34\47\1\226\13\47\21\0"+
    "\2\47\1\0\21\47\1\227\26\47\21\0\2\47\1\0"+
    "\30\47\1\230\17\47\21\0\2\47\1\0\41\47\1\231"+
    "\6\47\21\0\2\47\1\0\37\47\1\232\10\47\21\0"+
    "\2\47\1\0\37\47\1\233\10\47\21\0\2\47\1\0"+
    "\24\47\1\234\23\47\21\0\2\47\1\0\26\47\1\235"+
    "\21\47\21\0\2\47\1\0\41\47\1\236\6\47\21\0"+
    "\2\47\1\0\41\47\1\237\6\47\21\0\2\47\1\0"+
    "\37\47\1\240\10\47\21\0\2\47\1\0\43\47\1\241"+
    "\4\47\21\0\2\47\1\0\34\47\1\242\13\47\21\0"+
    "\2\47\1\0\21\47\1\243\26\47\21\0\2\47\1\0"+
    "\37\47\1\244\10\47\21\0\2\47\1\0\24\47\1\245"+
    "\23\47\21\0\2\47\1\0\41\47\1\246\6\47\21\0"+
    "\2\47\1\0\37\47\1\247\10\47\21\0\2\47\1\0"+
    "\34\47\1\250\13\47\21\0\2\47\1\0\37\47\1\251"+
    "\10\47\21\0\2\47\1\0\41\47\1\252\6\47\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7860];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\7\11\2\1\1\11"+
    "\5\1\2\11\12\1\2\11\2\0\22\1\1\0\24\1"+
    "\1\0\24\1\1\0\15\1\1\0\11\1\1\11\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */


    private Symbol symbolWithValue(int type, Object value){
      System.out.println("Encontré "+value.toString());
        return new Symbol(type, new Token(type, value.toString(), yyline+1, yycolumn+1 ));
    }

    private Symbol symbolWithoutValue(int type){
      System.out.println("Encontré "+type);
        return new Symbol(type, new Token(type, null, yyline+1, yycolumn+1 ));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JsonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbolWithoutValue(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Simbolo Ilegal: "+yytext()+", Linea: "+(yyline+1)+", Columna: "+(yycolumn+1));
            }
          // fall through
          case 46: break;
          case 2:
            { ;
            }
          // fall through
          case 47: break;
          case 3:
            { System.out.println("Finding something else: <" + yytext() + ">");
        return symbolWithValue(SYM, yytext());
            }
          // fall through
          case 48: break;
          case 4:
            { return symbolWithoutValue(COMILLA);
            }
          // fall through
          case 49: break;
          case 5:
            { return symbolWithoutValue(PARENTESIS_A);
            }
          // fall through
          case 50: break;
          case 6:
            { return symbolWithoutValue(PARENTESIS_C);
            }
          // fall through
          case 51: break;
          case 7:
            { return symbolWithoutValue(MULTIPLICACION);
            }
          // fall through
          case 52: break;
          case 8:
            { return symbolWithoutValue(SUMA);
            }
          // fall through
          case 53: break;
          case 9:
            { return symbolWithoutValue(COMA);
            }
          // fall through
          case 54: break;
          case 10:
            { return symbolWithoutValue(RESTA);
            }
          // fall through
          case 55: break;
          case 11:
            { return symbolWithoutValue(DIVISION);
            }
          // fall through
          case 56: break;
          case 12:
            { return symbolWithValue(ENTERO, yytext());
            }
          // fall through
          case 57: break;
          case 13:
            { return symbolWithoutValue(DOS_PUNTOS);
            }
          // fall through
          case 58: break;
          case 14:
            { return symbolWithoutValue(CORCHETE_A);
            }
          // fall through
          case 59: break;
          case 15:
            { return symbolWithoutValue(CORCHETE_C);
            }
          // fall through
          case 60: break;
          case 16:
            { return symbolWithoutValue(LLAVE_A);
            }
          // fall through
          case 61: break;
          case 17:
            { return symbolWithoutValue(LLAVE_C);
            }
          // fall through
          case 62: break;
          case 18:
            { return symbolWithValue(PALABRA, yytext());
            }
          // fall through
          case 63: break;
          case 19:
            { return symbolWithValue(DECIMAL, yytext());
            }
          // fall through
          case 64: break;
          case 20:
            { return symbolWithoutValue(ALL);
            }
          // fall through
          case 65: break;
          case 21:
            { return symbolWithoutValue(CEIL);
            }
          // fall through
          case 66: break;
          case 22:
            { return symbolWithoutValue(HALL);
            }
          // fall through
          case 67: break;
          case 23:
            { return symbolWithoutValue(COLS);
            }
          // fall through
          case 68: break;
          case 24:
            { return symbolWithoutValue(NAME);
            }
          // fall through
          case 69: break;
          case 25:
            { return symbolWithoutValue(POSX);
            }
          // fall through
          case 70: break;
          case 26:
            { return symbolWithoutValue(POSY);
            }
          // fall through
          case 71: break;
          case 27:
            { return symbolWithoutValue(ROWS);
            }
          // fall through
          case 72: break;
          case 28:
            { return symbolWithoutValue(TYPE);
            }
          // fall through
          case 73: break;
          case 29:
            { return symbolWithoutValue(BRICK);
            }
          // fall through
          case 74: break;
          case 30:
            { return symbolWithoutValue(FLOOR);
            }
          // fall through
          case 75: break;
          case 31:
            { return symbolWithoutValue(BOARD);
            }
          // fall through
          case 76: break;
          case 32:
            { return symbolWithoutValue(BOXES);
            }
          // fall through
          case 77: break;
          case 33:
            { return symbolWithoutValue(WORLD);
            }
          // fall through
          case 78: break;
          case 34:
            { return symbolWithoutValue(CONFIG);
            }
          // fall through
          case 79: break;
          case 35:
            { return symbolWithoutValue(PLAYER);
            }
          // fall through
          case 80: break;
          case 36:
            { return symbolWithoutValue(WORLDS);
            }
          // fall through
          case 81: break;
          case 37:
            { return symbolWithValue(HEXADECIMAL, yytext());
            }
          // fall through
          case 82: break;
          case 38:
            { return symbolWithoutValue(TARGETS);
            }
          // fall through
          case 83: break;
          case 39:
            { return symbolWithoutValue(BOX_COLOR);
            }
          // fall through
          case 84: break;
          case 40:
            { return symbolWithoutValue(HALL_COLOR);
            }
          // fall through
          case 85: break;
          case 41:
            { return symbolWithoutValue(BRICK_COLOR);
            }
          // fall through
          case 86: break;
          case 42:
            { return symbolWithoutValue(PLAYER_COLOR);
            }
          // fall through
          case 87: break;
          case 43:
            { return symbolWithoutValue(TARGET_COLOR);
            }
          // fall through
          case 88: break;
          case 44:
            { return symbolWithoutValue(UNDEFINED_COLOR);
            }
          // fall through
          case 89: break;
          case 45:
            { return symbolWithoutValue(BOX_ON_TARGET_COLOR);
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
