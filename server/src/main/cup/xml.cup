package com.mio.server.compiler.parser;

import com.mio.server.compiler.lexer.XMLLexer;

class XMLParser;

/*
 java -jar java-cup-11b.jar /home/mio/Escritorio/2023/proyecto-1-compis1/server/src/main/cup/xml.cup
*/

parser code {:

    public XMLParser(XMLLexer lexer){
        super(lexer);
    }
:}


terminal Token NAME, ROWS, COLS, PLAYER, CONFIG, TARGETS, BOXES, BOARD, WORLD, WORLDS, TYPE, POSX, POSY, MENOR_QUE, MAYOR_QUE;
terminal Token BOX_COLOR, BOX_ON_TARGET_COLOR, TARGET_COLOR, UNDEFINED_COLOR, BRICK_COLOR, HALL_COLOR, PLAYER_COLOR;
terminal Token INTERROGACION, XML, VERSION, IGUAL, LITERAL, ENCODING, DIAGONAL;
terminal Token HEXADECIMAL, HALL, BRICK, ENTERO, PALABRA;
non terminal main, encoding, worldsA, worlds, worldsC, worldA, world, worldC, atributos, atributo,nameA, nameC;
non terminal rowsA, rowsC, colsA, colsC, configA, configProd, configC, boardA, boardProd, boardC;
non terminal boxesA, boxesProd, boxesC, targetsA, targetsProd, targetsC, playerA, playerProd, playerC;
non terminal configAtributo, boxColorA, boxColorC, boxOnTargetColorA, boxOnTargetColorC, targetColorA, targetColorC;
non terminal brickColorA, brickColorC, hallColorA, hallColorC, undefinedColorA, undefinedColorC, playerColorA, playerColorC;
non terminal boardAtributo, posxA, posxC, posyA, posyC, typeA, typeC, typeProd, boxesAtributo, targetsAtributo, playerAtributo;

start with main;

main ::= encoding worldsA worlds worldsC
	;

encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE
    ;

worlds ::= worlds world
	| world
	;
	
world ::= worldA atributos worldC
	;

atributos ::= atributos atributo
	| atributo
	;
	
atributo ::= nameA PALABRA nameC
	| rowsA ENTERO rowsC
	| colsA ENTERO colsC
	| configA configProd configC
	| boardA boardProd boardC
	| boxesA boxesProd boxesC
	| targetsA targetsProd targetsC
	| playerA playerProd playerC
	;
	
configProd ::= configProd configAtributo
	| configAtributo
	;

configAtributo ::= boxColorA HEXADECIMAL boxColorC
	| boxOnTargetColorA HEXADECIMAL boxOnTargetColorC
	| targetColorA HEXADECIMAL targetColorC
	| brickColorA HEXADECIMAL brickColorC
	| hallColorA HEXADECIMAL hallColorC
	| undefinedColorA HEXADECIMAL undefinedColorC
	| playerColorA HEXADECIMAL playerColorC
	;

boardProd ::= boardProd boardAtributo
	| boardAtributo
	;

boardAtributo ::= posxA ENTERO posxC
	| posyA ENTERO posyC
	| typeA typeProd typeC
	;

typeProd ::= BRICK
	| HALL
	;

boxesProd ::= boxesProd boxesAtributo
	| boxesAtributo
	;

boxesAtributo ::= posxA ENTERO posxC
	| posyA ENTERO posyC
	;

targetsProd ::= targetsProd targetsAtributo
	| targetsAtributo
	;

targetsAtributo ::= posxA ENTERO posxC
	| posyA ENTERO posyC
	;

playerProd ::= playerProd playerAtributo
	| playerAtributo
	;

playerAtributo ::= posxA ENTERO posxC
	| posyA ENTERO posyC
	;

worldsA ::= MENOR_QUE WORLDS MAYOR_QUE
	;

worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE
	;

worldA ::= MENOR_QUE WORLD MAYOR_QUE
	;

worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE
	;

nameA ::= MENOR_QUE NAME MAYOR_QUE
	;

nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE
	;

rowsA ::= MENOR_QUE ROWS MAYOR_QUE
	;
rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE
	;

colsA ::= MENOR_QUE COLS MAYOR_QUE
	;

colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE
	;

configA ::= MENOR_QUE CONFIG MAYOR_QUE
	;

configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE
	;

boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE
	;

boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE
	;

boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE
	;
boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE
	;

targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE
	;
targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE
	;

brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE
	;
brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE
	;

hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE
	;

hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE
	;

undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE
	;

undefinedColorC ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE
	;

playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE
	;

playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE
	;

boardA ::= MENOR_QUE BOARD MAYOR_QUE
	;

boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE
	;

posxA ::= MENOR_QUE POSX MAYOR_QUE
	;

posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE
	;

posyA ::= MENOR_QUE POSY MAYOR_QUE
	;

posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE
	;

typeA ::= MENOR_QUE TYPE MAYOR_QUE
	;

typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE
	;

boxesA ::= MENOR_QUE BOXES MAYOR_QUE
	;

boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE
	;

targetsA ::= MENOR_QUE TARGETS MAYOR_QUE
	;

targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE
	;

playerA ::= MENOR_QUE PLAYER MAYOR_QUE
	;

playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE
	;







