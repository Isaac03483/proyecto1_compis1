package com.mio.server.compiler.parser;

import com.mio.server.builders.*;
import com.mio.server.compiler.Token;
import com.mio.server.compiler.lexer.XMLLexer;

class XMLParser;

/*
 java -jar java-cup-11b.jar /home/mio/Escritorio/2023/proyecto-1-compis1/server/src/main/cup/xml.cup
*/

parser code {:

    private WorldBuilder worldBuilder;
    private WConfigBuilder configBuilder;
    private PointBuilder pointBuilder;
    private BoardBuilder boardBuilder;
    public XMLParser(XMLLexer lexer){
        super(lexer);
        this.worldBuilder = new WorldBuilder();
        this.configBuilder = new WConfigBuilder();
        this.pointBuilder = new PointBuilder();
        this.boardBuilder = new BoardBuilder();
    }
:}


terminal Token NAME, ROWS, COLS, PLAYER, CONFIG, TARGETS, BOXES, BOARD, WORLD, WORLDS, TYPE, POSX, POSY, MENOR_QUE, MAYOR_QUE;
terminal Token BOX_COLOR, BOX_ON_TARGET_COLOR, TARGET_COLOR, UNDEFINED_COLOR, BRICK_COLOR, HALL_COLOR, PLAYER_COLOR;
terminal Token INTERROGACION, XML, VERSION, IGUAL, LITERAL, ENCODING, DIAGONAL;
terminal Token HEXADECIMAL, HALL, BRICK, ENTERO, PALABRA;
non terminal main, encoding, worldsA, worldsProd, worldsC, worldA, worldProd, worldC, atributos, atributo,nameA, nameC;
non terminal rowsA, rowsC, colsA, colsC, configA, configProd, configC, boardA, boardProd, boardC, pointProd, pointAtributo;
non terminal boxesA, boxesProd, boxesC, targetsA, targetsProd, targetsC, playerA, playerProd, playerC;
non terminal configAtributo, boxColorA, boxColorC, boxOnTargetColorA, boxOnTargetColorC, targetColorA, targetColorC;
non terminal brickColorA, brickColorC, hallColorA, hallColorC, undefinedColorA, undefinedColorC, playerColorA, playerColorC;
non terminal boardAtributo, posxA, posxC, posyA, posyC, typeA, typeC, typeProd, boxesAtributo, targetsAtributo, playerAtributo;

start with main;

main ::= encoding worldsA worldsProd:ws worldsC                     {:RESULT = ws;:}
	;

encoding ::= MENOR_QUE INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION MAYOR_QUE
    ;

worldsProd ::= worldsProd:array worldProd:w                         {:array.add(w);
                                                                    RESULT = array;:}
	| worldProd:w                                                   {:RESULT = new ArrayList<World>();
	                                                                RESULT.add(w);:}
	;
	
worldProd ::= worldA atributos:w worldC                             {:RESULT = w.build();
                                                                    worldBuilder.clean();:}
	;

atributos ::= atributos:w atributo                                  {:RESULT = w;:}
	| atributo
	;
	
atributo ::= nameA PALABRA:name nameC                               {:RESULT = worldBuilder.withName(String.valueOf(name.getValue()));:}
	| rowsA ENTERO:rows rowsC                                       {:RESULT = worldBuilder.withRows(Integer.valueOf(rows.getValue()));:}
	| colsA ENTERO:cols colsC                                       {:RESULT = worldBuilder.withCols(Integer.valueOf(cols.getValue()));:}
	| configA configProd:config configC                             {:RESULT =worldBuilder.withConfig(config.build());
	                                                                configBuilder.clean();:}
	| boardA boardProd:array boardC                                 {:RESULT =worldBuilder.withBoards(array);:}
	| boxesA boxesProd:array boxesC                                 {:RESULT =worldBuilder.withBoxes(array);:}
	| targetsA targetsProd:array targetsC                           {:RESULT =worldBuilder.withTargets(array);:}
	| playerA playerProd:point playerC                              {:RESULT =worldBuilder.withPlayer(point);:}
	;
	
configProd ::= configProd:config configAtributo                     {:RESULT = config:}
	| configAtributo
	;

configAtributo ::= boxColorA HEXADECIMAL:h boxColorC                {:RESULT = configBuilder.withBoxColor(h.getValue());:}
	| boxOnTargetColorA HEXADECIMAL:h boxOnTargetColorC             {:RESULT = configBuilder.withBoxOnTargetColor(h.getValue());:}
	| targetColorA HEXADECIMAL:h targetColorC                       {:RESULT = configBuilder.withTargetColor(h.getValue());:}
	| brickColorA HEXADECIMAL:h brickColorC                         {:RESULT = configBuilder.withBrickColor(h.getValue());:}
	| hallColorA HEXADECIMAL:h hallColorC                           {:RESULT = configBuilder.withHallColor(h.getValue());:}
	| undefinedColorA HEXADECIMAL:h undefinedColorC                 {:RESULT = configBuilder.withUndefinedColor(h.getValue());:}
	| playerColorA HEXADECIMAL:h playerColorC                       {:RESULT = configBuilder.withPlayerColor(h.getValue());:}
	;

boardProd ::= boardProd:array boardAtributo:board                   {:array.add(board.build());
                                                                    RESULT = array;
                                                                    boardBuilder.clean();:}
	| boardAtributo:board                                           {:RESULT = new ArrayList<Board>();
	                                                                RESULT.add(board.build());
	                                                                boardBuilder.clean();:}
	;

boardAtributo ::= pointProd:point                                   {:RESULT = boardBuilder.withPoint(point);:}
	| typeA typeProd:type typeC                                     {:RESULT = boardBuilder.withType(type);:}
	;

typeProd ::= BRICK: brick                                           {:RESULT = brick.getType();:}
	| HALL: hall                                                    {:RESULT = hall.getType();:}
	;

boxesProd ::= boxesProd:array boxesAtributo:point                   {:array.add(point);
                                                                    RESULT = array;:}
	| boxesAtributo:point                                           {:RESULT = new ArrayList<Point>();
	                                                                RESULT.add(point);:}
	;

boxesAtributo ::= pointProd:point                                   {:RESULT =point; :}
	;

targetsProd ::= targetsProd:array targetsAtributo:point             {:array.add(point);
                                                                    RESULT = array;:}
	| targetsAtributo:point                                         {:RESULT = new ArrayList<Point>();
	                                                                RESULT.add(point);:}
	;

targetsAtributo ::= pointProd:point                                 {:RESULT = point;:}
	;

playerProd ::= playerProd:point playerAtributo                      {:RESULT = point;:}
	| playerAtributo
	;

playerAtributo ::= pointProd:point                                  {:RESULT = point;:}
	;

pointProd ::= pointProd:point pointAtributo                         {:RESULT = pointBuilder.build();
                                                                    pointBuilder.clean();:}
    | pointAtributo
    ;

pointAtributo ::= posxA ENTERO:posx posxC                           {:RESULT = pointBuilder.withPosX(Integer.valueOf(posx.getValue()));:}
    | posyA ENTERO:posy posyC                                       {:RESULT = pointBuilder.withPosY(Integer.valueOf(posy.getValue()));:}
    ;

worldsA ::= MENOR_QUE WORLDS MAYOR_QUE
	;

worldsC ::= MENOR_QUE DIAGONAL WORLDS MAYOR_QUE
	;

worldA ::= MENOR_QUE WORLD MAYOR_QUE
	;

worldC ::= MENOR_QUE DIAGONAL WORLD MAYOR_QUE
	;

nameA ::= MENOR_QUE NAME MAYOR_QUE
	;

nameC ::= MENOR_QUE DIAGONAL NAME MAYOR_QUE
	;

rowsA ::= MENOR_QUE ROWS MAYOR_QUE
	;
rowsC ::= MENOR_QUE DIAGONAL ROWS MAYOR_QUE
	;

colsA ::= MENOR_QUE COLS MAYOR_QUE
	;

colsC ::= MENOR_QUE DIAGONAL COLS MAYOR_QUE
	;

configA ::= MENOR_QUE CONFIG MAYOR_QUE
	;

configC ::= MENOR_QUE DIAGONAL CONFIG MAYOR_QUE
	;

boxColorA ::= MENOR_QUE BOX_COLOR MAYOR_QUE
	;

boxColorC ::= MENOR_QUE DIAGONAL BOX_COLOR MAYOR_QUE
	;

boxOnTargetColorA ::= MENOR_QUE BOX_ON_TARGET_COLOR MAYOR_QUE
	;
boxOnTargetColorC ::= MENOR_QUE DIAGONAL BOX_ON_TARGET_COLOR MAYOR_QUE
	;

targetColorA ::= MENOR_QUE TARGET_COLOR MAYOR_QUE
	;
targetColorC ::= MENOR_QUE DIAGONAL TARGET_COLOR MAYOR_QUE
	;

brickColorA ::= MENOR_QUE BRICK_COLOR MAYOR_QUE
	;
brickColorC ::= MENOR_QUE DIAGONAL BRICK_COLOR MAYOR_QUE
	;

hallColorA ::= MENOR_QUE HALL_COLOR MAYOR_QUE
	;

hallColorC ::= MENOR_QUE DIAGONAL HALL_COLOR MAYOR_QUE
	;

undefinedColorA ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE
	;

undefinedColorC ::= MENOR_QUE UNDEFINED_COLOR MAYOR_QUE
	;

playerColorA ::= MENOR_QUE PLAYER_COLOR MAYOR_QUE
	;

playerColorC ::= MENOR_QUE DIAGONAL PLAYER_COLOR MAYOR_QUE
	;

boardA ::= MENOR_QUE BOARD MAYOR_QUE
	;

boardC ::= MENOR_QUE DIAGONAL BOARD MAYOR_QUE
	;

posxA ::= MENOR_QUE POSX MAYOR_QUE
	;

posxC ::= MENOR_QUE DIAGONAL POSX MAYOR_QUE
	;

posyA ::= MENOR_QUE POSY MAYOR_QUE
	;

posyC ::= MENOR_QUE DIAGONAL POSY MAYOR_QUE
	;

typeA ::= MENOR_QUE TYPE MAYOR_QUE
	;

typeC ::= MENOR_QUE DIAGONAL TYPE MAYOR_QUE
	;

boxesA ::= MENOR_QUE BOXES MAYOR_QUE
	;

boxesC ::= MENOR_QUE DIAGONAL BOXES MAYOR_QUE
	;

targetsA ::= MENOR_QUE TARGETS MAYOR_QUE
	;

targetsC ::= MENOR_QUE DIAGONAL TARGETS MAYOR_QUE
	;

playerA ::= MENOR_QUE PLAYER MAYOR_QUE
	;

playerC ::= MENOR_QUE DIAGONAL PLAYER MAYOR_QUE
	;







