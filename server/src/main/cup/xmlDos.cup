package com.mio.server.compiler.parser;

import com.mio.server.builders.*;
import com.mio.server.compiler.Token;
import com.mio.server.compiler.lexer.XMLTestLexer;

class XMLTestParser;

/*
 java -jar java-cup-11b.jar /home/mio/Escritorio/2023/proyecto-1-compis1/server/src/main/cup/xmlDos.cup
*/

parser code {:

    private WorldBuilder worldBuilder;
    private WConfigBuilder configBuilder;
    private PointBuilder pointBuilder;
    private BoardBuilder boardBuilder;
    public XMLTestParser(XMLTestLexer lexer){
        super(lexer);
        this.worldBuilder = new WorldBuilder();
        this.configBuilder = new WConfigBuilder();
        this.pointBuilder = new PointBuilder();
        this.boardBuilder = new BoardBuilder();
    }
:}

terminal WORLDS_A,WORLD_A,NAME_A,ROWS_A,COLS_A,CONFIG_A,BOX_COLOR_A,BOX_ON_TARGET_COLOR_A,TARGET_COLOR_A,BRICK_COLOR_A;
terminal HALL_COLOR_A,UNDEFINED_COLOR_A,PLAYER_COLOR_A,BOARD_A,POSX_A,POSY_A,TYPE_A,BOXES_A,TARGETS_A,PLAYER_A;

terminal WORLDS_C,WORLD_C,NAME_C,ROWS_C,COLS_C,CONFIG_C,BOX_COLOR_C,BOX_ON_TARGET_COLOR_C,TARGET_COLOR_C,BRICK_COLOR_C;
terminal HALL_COLOR_C,UNDEFINED_COLOR_C,PLAYER_COLOR_C,BOARD_C,POSX_C,POSY_C,TYPE_C,BOXES_C,TARGETS_C,PLAYER_C;

terminal Token ENTERO, LITERAL, XML, ENCODING, IGUAL, VERSION, INTERROGACION, PALABRA, HEXADECIMAL,HALL,BRICK;

//non terminals
non terminal main, encoding, worldsProd, worlds, world, atributos, atributo, boardsProd, boardProd, boxesProd, targetsProd;
non terminal pointObj, pointProd, typeProd, configProd;

//tags

start with main;

main ::= encoding worldsProd
	;

worldsProd ::= WORLDS_A worlds WORLDS_C
    ;

worlds ::= worlds world
    | world
    ;

world ::= WORLD_A atributos WORLD_C
    ;

atributos ::= atributos atributo
    | atributo
    ;

atributo ::= NAME_A PALABRA NAME_C
    | ROWS_A ENTERO ROWS_C
    | COLS_A ENTERO COLS_C
    | CONFIG_A configProd CONFIG_C
    | PLAYER_A pointObj PLAYER_C
    | BOARD_A boardProd BOARD_C
    | BOXES_A pointObj BOXES_C
    | TARGETS_A pointObj TARGETS_C
    ;

boardProd ::= pointObj
    | TYPE_A typeProd TYPE_C
    ;

boxesProd ::= boxesProd BOXES_A pointObj BOXES_C
    | BOXES_A pointObj BOXES_C
    ;

targetsProd ::= targetsProd TARGETS_A pointObj TARGETS_C
    | TARGETS_A pointObj TARGETS_C
    ;

pointObj ::= pointObj pointProd
    | pointProd
    ;

pointProd ::= POSX_A ENTERO POSX_C
    | POSY_A ENTERO POSY_C
    ;

encoding ::= INTERROGACION XML VERSION IGUAL LITERAL ENCODING IGUAL LITERAL INTERROGACION
    ;